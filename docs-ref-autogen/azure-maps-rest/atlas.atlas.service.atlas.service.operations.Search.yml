### YamlMime:UniversalReference
items:
  - uid: azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search
    name: Search
    fullName: Search
    children:
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.constructor
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddress
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddress_1
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddress_2
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddress_3
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressReverse
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressReverse_1
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressReverse_2
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressReverse_3
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressReverseCrossStreet
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressReverseCrossStreet_1
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressReverseCrossStreet_2
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressReverseCrossStreet_3
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressReverseCrossStreetWithHttpOperationResponse
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressReverseWithHttpOperationResponse
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressStructured
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressStructured_1
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressStructured_2
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressStructured_3
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressStructuredWithHttpOperationResponse
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressWithHttpOperationResponse
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAlongRouteWithHttpOperationResponse
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchFuzzy
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchFuzzy_1
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchFuzzy_2
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchFuzzy_3
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchFuzzyWithHttpOperationResponse
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchInsideGeometryWithHttpOperationResponse
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchNearby
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchNearby_1
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchNearby_2
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchNearby_3
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchNearbyWithHttpOperationResponse
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchPOI
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchPOI_1
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchPOI_2
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchPOI_3
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchPOICategory
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchPOICategory_1
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchPOICategory_2
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchPOICategory_3
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchPOICategoryWithHttpOperationResponse
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchPOIWithHttpOperationResponse
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.postSearchAlongRoute
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.postSearchAlongRoute_1
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.postSearchAlongRoute_2
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.postSearchAlongRoute_3
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.postSearchAlongRouteWithHttpOperationResponse
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.postSearchInsideGeometry
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.postSearchInsideGeometry_1
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.postSearchInsideGeometry_2
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.postSearchInsideGeometry_3
      - >-
        azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.postSearchInsideGeometryWithHttpOperationResponse
    langs:
      - typeScript
    type: class
    summary: Class representing a Search.
    source:
      path: index.d.ts
      startLine: 137
      remote:
        path: src/SDKs/Js/Services/typings\index.d.ts
        repo: >-
          https://msazure.visualstudio.com/DefaultCollection/One/_git/Azure-IoT-LocationBasedServices
        branch: users/chgennar/declarationDocs
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.constructor
    name: Search
    children: []
    type: constructor
    langs:
      - typeScript
    summary: Create a Search.
    syntax:
      content: 'new Search(client: MapsClientContext)'
      parameters:
        - id: client
          type:
            - azure-maps-rest.atlas.atlas.service.MapsClientContext
          description: |
            Reference to the service client.
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddress
    name: getSearchAddress
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Address Geocoding**<br><br>In many cases, the complete search service
      might be too much, for

      instance if you are only interested in traditional geocoding. Search can
      also be accessed for

      address look up exclusively. The geocoding is performed by hitting the
      geocode endpoint with

      just the address or partial address in question. The geocoding search
      index will be queried for

      everything above the street level data. No POIs will be returned. Note
      that the geocoder is very

      tolerant of typos and incomplete addresses. It will also handle everything
      from exact street

      addresses or street or intersections as well as higher level geographies
      such as city centers,

      counties, states etc.
    syntax:
      content: 'function getSearchAddress(query: string)'
      parameters:
        - id: query
          type:
            - string
          description: >
            The address to search for (e.g., "1 Microsoft way, Redmond, WA"),
            must be

            properly URL encoded.
      return:
        type:
          - Promise<azure-maps-rest.atlas.atlas.Models.SearchAddressResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddress_1
    name: getSearchAddress
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Address Geocoding**<br><br>In many cases, the complete search service
      might be too much, for

      instance if you are only interested in traditional geocoding. Search can
      also be accessed for

      address look up exclusively. The geocoding is performed by hitting the
      geocode endpoint with

      just the address or partial address in question. The geocoding search
      index will be queried for

      everything above the street level data. No POIs will be returned. Note
      that the geocoder is very

      tolerant of typos and incomplete addresses. It will also handle everything
      from exact street

      addresses or street or intersections as well as higher level geographies
      such as city centers,

      counties, states etc.
    syntax:
      content: >-
        function getSearchAddress(query: string, options:
        SearchGetSearchAddressOptionalParams)
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchAddressOptionalParams
          description: ''
      return:
        type:
          - Promise<azure-maps-rest.atlas.atlas.Models.SearchAddressResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddress_2
    name: getSearchAddress
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Address Geocoding**<br><br>In many cases, the complete search service
      might be too much, for

      instance if you are only interested in traditional geocoding. Search can
      also be accessed for

      address look up exclusively. The geocoding is performed by hitting the
      geocode endpoint with

      just the address or partial address in question. The geocoding search
      index will be queried for

      everything above the street level data. No POIs will be returned. Note
      that the geocoder is very

      tolerant of typos and incomplete addresses. It will also handle everything
      from exact street

      addresses or street or intersections as well as higher level geographies
      such as city centers,

      counties, states etc.
    syntax:
      content: >-
        function getSearchAddress(query: string, callback:
        ServiceCallback<SearchAddressResponse>)
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchAddressResponse>
          description: ''
      return:
        type:
          - Promise<azure-maps-rest.atlas.atlas.Models.SearchAddressResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddress_3
    name: getSearchAddress
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Address Geocoding**<br><br>In many cases, the complete search service
      might be too much, for

      instance if you are only interested in traditional geocoding. Search can
      also be accessed for

      address look up exclusively. The geocoding is performed by hitting the
      geocode endpoint with

      just the address or partial address in question. The geocoding search
      index will be queried for

      everything above the street level data. No POIs will be returned. Note
      that the geocoder is very

      tolerant of typos and incomplete addresses. It will also handle everything
      from exact street

      addresses or street or intersections as well as higher level geographies
      such as city centers,

      counties, states etc.
    syntax:
      content: >-
        function getSearchAddress(query: string, options:
        SearchGetSearchAddressOptionalParams, callback:
        ServiceCallback<SearchAddressResponse>)
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchAddressOptionalParams
          description: ''
        - id: callback
          type:
            - >-
              ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchAddressResponse>
          description: ''
      return:
        type:
          - Promise<azure-maps-rest.atlas.atlas.Models.SearchAddressResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressReverse
    name: getSearchAddressReverse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Reverse Geocode to an Address**<br><br>There may be times when you need
      to translate a

      coordinate (example: 37.786505, -122.3862) into a human understandable
      street address. Most

      often this is needed in tracking applications where you receive a GPS feed
      from the device or

      asset and wish to know what address where the coordinate is located. This
      endpoint will return

      address information for a given coordinate.
    syntax:
      content: 'function getSearchAddressReverse(query: string)'
      parameters:
        - id: query
          type:
            - string
          description: >
            The applicable query specified as a comma separated string composed
            by

            latitude followed by longitude e.g. "47.641268, -122.125679".
      return:
        type:
          - >-
            Promise<azure-maps-rest.atlas.atlas.Models.SearchAddressReverseResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressReverse_1
    name: getSearchAddressReverse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Reverse Geocode to an Address**<br><br>There may be times when you need
      to translate a

      coordinate (example: 37.786505, -122.3862) into a human understandable
      street address. Most

      often this is needed in tracking applications where you receive a GPS feed
      from the device or

      asset and wish to know what address where the coordinate is located. This
      endpoint will return

      address information for a given coordinate.
    syntax:
      content: >-
        function getSearchAddressReverse(query: string, options:
        SearchGetSearchAddressReverseOptionalParams)
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchAddressReverseOptionalParams
          description: ''
      return:
        type:
          - >-
            Promise<azure-maps-rest.atlas.atlas.Models.SearchAddressReverseResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressReverse_2
    name: getSearchAddressReverse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Reverse Geocode to an Address**<br><br>There may be times when you need
      to translate a

      coordinate (example: 37.786505, -122.3862) into a human understandable
      street address. Most

      often this is needed in tracking applications where you receive a GPS feed
      from the device or

      asset and wish to know what address where the coordinate is located. This
      endpoint will return

      address information for a given coordinate.
    syntax:
      content: >-
        function getSearchAddressReverse(query: string, callback:
        ServiceCallback<SearchAddressReverseResponse>)
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchAddressReverseResponse>
          description: ''
      return:
        type:
          - >-
            Promise<azure-maps-rest.atlas.atlas.Models.SearchAddressReverseResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressReverse_3
    name: getSearchAddressReverse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Reverse Geocode to an Address**<br><br>There may be times when you need
      to translate a

      coordinate (example: 37.786505, -122.3862) into a human understandable
      street address. Most

      often this is needed in tracking applications where you receive a GPS feed
      from the device or

      asset and wish to know what address where the coordinate is located. This
      endpoint will return

      address information for a given coordinate.
    syntax:
      content: >-
        function getSearchAddressReverse(query: string, options:
        SearchGetSearchAddressReverseOptionalParams, callback:
        ServiceCallback<SearchAddressReverseResponse>)
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchAddressReverseOptionalParams
          description: ''
        - id: callback
          type:
            - >-
              ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchAddressReverseResponse>
          description: ''
      return:
        type:
          - >-
            Promise<azure-maps-rest.atlas.atlas.Models.SearchAddressReverseResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressReverseCrossStreet
    name: getSearchAddressReverseCrossStreet
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Reverse Geocode to a Cross Street**<br><br>There may be times when you
      need to translate a

      coordinate (example: 37.786505, -122.3862) into a human understandable
      cross street. Most often

      this is needed in tracking applications where you receive a GPS feed from
      the device or asset

      and wish to know what address where the coordinate is located.<br><br>This
      endpoint will return

      cross street information for a given coordinate.
    syntax:
      content: 'function getSearchAddressReverseCrossStreet(query: string)'
      parameters:
        - id: query
          type:
            - string
          description: >
            The applicable query specified as a comma separated string composed
            by

            latitude followed by longitude e.g. "47.641268, -122.125679".
      return:
        type:
          - >-
            Promise<azure-maps-rest.atlas.atlas.Models.SearchAddressReverseCrossStreetResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressReverseCrossStreet_1
    name: getSearchAddressReverseCrossStreet
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Reverse Geocode to a Cross Street**<br><br>There may be times when you
      need to translate a

      coordinate (example: 37.786505, -122.3862) into a human understandable
      cross street. Most often

      this is needed in tracking applications where you receive a GPS feed from
      the device or asset

      and wish to know what address where the coordinate is located.<br><br>This
      endpoint will return

      cross street information for a given coordinate.
    syntax:
      content: >-
        function getSearchAddressReverseCrossStreet(query: string, options:
        SearchGetSearchAddressReverseCrossStreetOptionalParams)
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchAddressReverseCrossStreetOptionalParams
          description: ''
      return:
        type:
          - >-
            Promise<azure-maps-rest.atlas.atlas.Models.SearchAddressReverseCrossStreetResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressReverseCrossStreet_2
    name: getSearchAddressReverseCrossStreet
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Reverse Geocode to a Cross Street**<br><br>There may be times when you
      need to translate a

      coordinate (example: 37.786505, -122.3862) into a human understandable
      cross street. Most often

      this is needed in tracking applications where you receive a GPS feed from
      the device or asset

      and wish to know what address where the coordinate is located.<br><br>This
      endpoint will return

      cross street information for a given coordinate.
    syntax:
      content: >-
        function getSearchAddressReverseCrossStreet(query: string, callback:
        ServiceCallback<SearchAddressReverseCrossStreetResponse>)
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchAddressReverseCrossStreetResponse>
          description: ''
      return:
        type:
          - >-
            Promise<azure-maps-rest.atlas.atlas.Models.SearchAddressReverseCrossStreetResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressReverseCrossStreet_3
    name: getSearchAddressReverseCrossStreet
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Reverse Geocode to a Cross Street**<br><br>There may be times when you
      need to translate a

      coordinate (example: 37.786505, -122.3862) into a human understandable
      cross street. Most often

      this is needed in tracking applications where you receive a GPS feed from
      the device or asset

      and wish to know what address where the coordinate is located.<br><br>This
      endpoint will return

      cross street information for a given coordinate.
    syntax:
      content: >-
        function getSearchAddressReverseCrossStreet(query: string, options:
        SearchGetSearchAddressReverseCrossStreetOptionalParams, callback:
        ServiceCallback<SearchAddressReverseCrossStreetResponse>)
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchAddressReverseCrossStreetOptionalParams
          description: ''
        - id: callback
          type:
            - >-
              ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchAddressReverseCrossStreetResponse>
          description: ''
      return:
        type:
          - >-
            Promise<azure-maps-rest.atlas.atlas.Models.SearchAddressReverseCrossStreetResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressReverseCrossStreetWithHttpOperationResponse
    name: getSearchAddressReverseCrossStreetWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Reverse Geocode to a Cross Street**<br><br>There may be times when you
      need to translate a

      coordinate (example: 37.786505, -122.3862) into a human understandable
      cross street. Most often

      this is needed in tracking applications where you receive a GPS feed from
      the device or asset

      and wish to know what address where the coordinate is located.<br><br>This
      endpoint will return

      cross street information for a given coordinate.
    syntax:
      content: >-
        function
        getSearchAddressReverseCrossStreetWithHttpOperationResponse(query:
        string, options?:
        SearchGetSearchAddressReverseCrossStreetOptionalParams)
      parameters:
        - id: query
          type:
            - string
          description: >
            The applicable query specified as a comma separated string composed
            by

            latitude followed by longitude e.g. "47.641268, -122.125679".
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchAddressReverseCrossStreetOptionalParams
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-maps-rest.atlas.atlas.Models.SearchAddressReverseCrossStreetResponse>>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressReverseWithHttpOperationResponse
    name: getSearchAddressReverseWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Reverse Geocode to an Address**<br><br>There may be times when you need
      to translate a

      coordinate (example: 37.786505, -122.3862) into a human understandable
      street address. Most

      often this is needed in tracking applications where you receive a GPS feed
      from the device or

      asset and wish to know what address where the coordinate is located. This
      endpoint will return

      address information for a given coordinate.
    syntax:
      content: >-
        function getSearchAddressReverseWithHttpOperationResponse(query: string,
        options?: SearchGetSearchAddressReverseOptionalParams)
      parameters:
        - id: query
          type:
            - string
          description: >
            The applicable query specified as a comma separated string composed
            by

            latitude followed by longitude e.g. "47.641268, -122.125679".
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchAddressReverseOptionalParams
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-maps-rest.atlas.atlas.Models.SearchAddressReverseResponse>>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressStructured
    name: getSearchAddressStructured
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Structured Address Geocoding**<br><br>Azure Address Geocoding can also
      be accessed for

      structured address look up exclusively. The geocoding search index will be
      queried for

      everything above the street level data. No POIs will be returned. Note
      that the geocoder is very

      tolerant of typos and incomplete addresses. It will also handle everything
      from exact street

      addresses or street or intersections as well as higher level geographies
      such as city centers,

      counties, states etc.
    syntax:
      content: 'function getSearchAddressStructured(countryCode: string)'
      parameters:
        - id: countryCode
          type:
            - string
          description: |
            The 2 or 3 letter country code portion of an address. E.g. US
      return:
        type:
          - >-
            Promise<azure-maps-rest.atlas.atlas.Models.SearchAddressStructuredResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressStructured_1
    name: getSearchAddressStructured
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Structured Address Geocoding**<br><br>Azure Address Geocoding can also
      be accessed for

      structured address look up exclusively. The geocoding search index will be
      queried for

      everything above the street level data. No POIs will be returned. Note
      that the geocoder is very

      tolerant of typos and incomplete addresses. It will also handle everything
      from exact street

      addresses or street or intersections as well as higher level geographies
      such as city centers,

      counties, states etc.
    syntax:
      content: >-
        function getSearchAddressStructured(countryCode: string, options:
        SearchGetSearchAddressStructuredOptionalParams)
      parameters:
        - id: countryCode
          type:
            - string
          description: ''
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchAddressStructuredOptionalParams
          description: ''
      return:
        type:
          - >-
            Promise<azure-maps-rest.atlas.atlas.Models.SearchAddressStructuredResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressStructured_2
    name: getSearchAddressStructured
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Structured Address Geocoding**<br><br>Azure Address Geocoding can also
      be accessed for

      structured address look up exclusively. The geocoding search index will be
      queried for

      everything above the street level data. No POIs will be returned. Note
      that the geocoder is very

      tolerant of typos and incomplete addresses. It will also handle everything
      from exact street

      addresses or street or intersections as well as higher level geographies
      such as city centers,

      counties, states etc.
    syntax:
      content: >-
        function getSearchAddressStructured(countryCode: string, callback:
        ServiceCallback<SearchAddressStructuredResponse>)
      parameters:
        - id: countryCode
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchAddressStructuredResponse>
          description: ''
      return:
        type:
          - >-
            Promise<azure-maps-rest.atlas.atlas.Models.SearchAddressStructuredResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressStructured_3
    name: getSearchAddressStructured
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Structured Address Geocoding**<br><br>Azure Address Geocoding can also
      be accessed for

      structured address look up exclusively. The geocoding search index will be
      queried for

      everything above the street level data. No POIs will be returned. Note
      that the geocoder is very

      tolerant of typos and incomplete addresses. It will also handle everything
      from exact street

      addresses or street or intersections as well as higher level geographies
      such as city centers,

      counties, states etc.
    syntax:
      content: >-
        function getSearchAddressStructured(countryCode: string, options:
        SearchGetSearchAddressStructuredOptionalParams, callback:
        ServiceCallback<SearchAddressStructuredResponse>)
      parameters:
        - id: countryCode
          type:
            - string
          description: ''
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchAddressStructuredOptionalParams
          description: ''
        - id: callback
          type:
            - >-
              ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchAddressStructuredResponse>
          description: ''
      return:
        type:
          - >-
            Promise<azure-maps-rest.atlas.atlas.Models.SearchAddressStructuredResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressStructuredWithHttpOperationResponse
    name: getSearchAddressStructuredWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Structured Address Geocoding**<br><br>Azure Address Geocoding can also
      be accessed for

      structured address look up exclusively. The geocoding search index will be
      queried for

      everything above the street level data. No POIs will be returned. Note
      that the geocoder is very

      tolerant of typos and incomplete addresses. It will also handle everything
      from exact street

      addresses or street or intersections as well as higher level geographies
      such as city centers,

      counties, states etc.
    syntax:
      content: >-
        function
        getSearchAddressStructuredWithHttpOperationResponse(countryCode: string,
        options?: SearchGetSearchAddressStructuredOptionalParams)
      parameters:
        - id: countryCode
          type:
            - string
          description: |
            The 2 or 3 letter country code portion of an address. E.g. US
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchAddressStructuredOptionalParams
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-maps-rest.atlas.atlas.Models.SearchAddressStructuredResponse>>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAddressWithHttpOperationResponse
    name: getSearchAddressWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Address Geocoding**<br><br>In many cases, the complete search service
      might be too much, for

      instance if you are only interested in traditional geocoding. Search can
      also be accessed for

      address look up exclusively. The geocoding is performed by hitting the
      geocode endpoint with

      just the address or partial address in question. The geocoding search
      index will be queried for

      everything above the street level data. No POIs will be returned. Note
      that the geocoder is very

      tolerant of typos and incomplete addresses. It will also handle everything
      from exact street

      addresses or street or intersections as well as higher level geographies
      such as city centers,

      counties, states etc.
    syntax:
      content: >-
        function getSearchAddressWithHttpOperationResponse(query: string,
        options?: SearchGetSearchAddressOptionalParams)
      parameters:
        - id: query
          type:
            - string
          description: >
            The address to search for (e.g., "1 Microsoft way, Redmond, WA"),
            must be

            properly URL encoded.
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchAddressOptionalParams
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-maps-rest.atlas.atlas.Models.SearchAddressResponse>>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchAlongRouteWithHttpOperationResponse
    name: getSearchAlongRouteWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Search Along Route endpoint allows you to perform a fuzzy search for
      POIs along a specified

      route. This search is constrained by specifying the `maxDetourTime`
      limiting measure.<br><br>To

      send the route-points you will use a `GET` request where the `route`
      parameter is represented as

      a `GeoJSON LineString` type. Each route-point in `route` is represented as
      a `GeoJSON Position`

      type i.e. an array where the _longitude_ value is followed by the
      _latitude_ value and the

      _altitude_ value is ignored. The `route` should contain at least 2
      route-points.<br><br>It is

      possible that original route will be altered, some of it's points may be
      skipped. If the route

      that passes through the found point is faster than the original one, the
      `detourTime` value in

      the response is negative.
    syntax:
      content: >-
        function getSearchAlongRouteWithHttpOperationResponse(query: string,
        route: string, maxDetourTime: number, options?:
        SearchGetSearchAlongRouteOptionalParams)
      parameters:
        - id: query
          type:
            - string
          description: >
            The applicable query string (e.g., "burger joints", "pizza"). Can
            _also_

            be specified as a comma separated string composed by latitude
            followed by longitude (e.g.,

            "47.641268, -122.125679"). Must be properly URL encoded.
        - id: route
          type:
            - string
          description: >
            This represents the route to search along and should be a valid
            `GeoJSON

            LineString` type. Please refer to [RFC
            7946](https://tools.ietf.org/html/rfc7946#section-3.1.4)

            for details.
        - id: maxDetourTime
          type:
            - number
          description: |
            Maximum detour time of the point of interest in seconds. Max value
            is 3600 seconds
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchAlongRouteOptionalParams
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-maps-rest.atlas.atlas.Models.SearchAlongRouteResponse>>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchFuzzy
    name: getSearchFuzzy
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Free Form Search**<br><br>The basic default API is Free Form Search
      which handles the most

      fuzzy of inputs handling any combination of address or POI tokens. This
      search API is the

      canonical 'single line search'. The Free Form Search API is a seamless
      combination of POI search

      and geocoding. The API can also be weighted with a contextual position
      (lat./lon. pair), or

      fully constrained by a coordinate and radius, or it can be executed more
      generally without any

      geo biasing anchor point.<br><br>We strongly advise you to use the
      'countrySet' parameter to

      specify only the countries for which your application needs coverage, as
      the default behavior

      will be to search the entire world, potentially returning unnecessary
      results.<br><br> E.g.:

      `countrySet`=US,FR <br><br>Please see [Search

      Coverage](https://docs.microsoft.com/en-us/azure/location-based-services/geocoding-coverage)
      for

      a complete list of all the supported countries.<br><br>Most Search queries
      default to

      `maxFuzzyLevel`=2 to gain performance and also reduce unusual results.
      This new default can be

      overridden as needed per request by passing in the query param
      `maxFuzzyLevel`=3 or 4.
    syntax:
      content: 'function getSearchFuzzy(query: string)'
      parameters:
        - id: query
          type:
            - string
          description: >
            The applicable query string (e.g., "seattle", "pizza"). Can _also_
            be

            specified as a comma separated string composed by latitude followed
            by longitude (e.g.,

            "47.641268, -122.125679"). Must be properly URL encoded.
      return:
        type:
          - Promise<azure-maps-rest.atlas.atlas.Models.SearchFuzzyResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchFuzzy_1
    name: getSearchFuzzy
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Free Form Search**<br><br>The basic default API is Free Form Search
      which handles the most

      fuzzy of inputs handling any combination of address or POI tokens. This
      search API is the

      canonical 'single line search'. The Free Form Search API is a seamless
      combination of POI search

      and geocoding. The API can also be weighted with a contextual position
      (lat./lon. pair), or

      fully constrained by a coordinate and radius, or it can be executed more
      generally without any

      geo biasing anchor point.<br><br>We strongly advise you to use the
      'countrySet' parameter to

      specify only the countries for which your application needs coverage, as
      the default behavior

      will be to search the entire world, potentially returning unnecessary
      results.<br><br> E.g.:

      `countrySet`=US,FR <br><br>Please see [Search

      Coverage](https://docs.microsoft.com/en-us/azure/location-based-services/geocoding-coverage)
      for

      a complete list of all the supported countries.<br><br>Most Search queries
      default to

      `maxFuzzyLevel`=2 to gain performance and also reduce unusual results.
      This new default can be

      overridden as needed per request by passing in the query param
      `maxFuzzyLevel`=3 or 4.
    syntax:
      content: >-
        function getSearchFuzzy(query: string, options:
        SearchGetSearchFuzzyOptionalParams)
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchFuzzyOptionalParams
          description: ''
      return:
        type:
          - Promise<azure-maps-rest.atlas.atlas.Models.SearchFuzzyResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchFuzzy_2
    name: getSearchFuzzy
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Free Form Search**<br><br>The basic default API is Free Form Search
      which handles the most

      fuzzy of inputs handling any combination of address or POI tokens. This
      search API is the

      canonical 'single line search'. The Free Form Search API is a seamless
      combination of POI search

      and geocoding. The API can also be weighted with a contextual position
      (lat./lon. pair), or

      fully constrained by a coordinate and radius, or it can be executed more
      generally without any

      geo biasing anchor point.<br><br>We strongly advise you to use the
      'countrySet' parameter to

      specify only the countries for which your application needs coverage, as
      the default behavior

      will be to search the entire world, potentially returning unnecessary
      results.<br><br> E.g.:

      `countrySet`=US,FR <br><br>Please see [Search

      Coverage](https://docs.microsoft.com/en-us/azure/location-based-services/geocoding-coverage)
      for

      a complete list of all the supported countries.<br><br>Most Search queries
      default to

      `maxFuzzyLevel`=2 to gain performance and also reduce unusual results.
      This new default can be

      overridden as needed per request by passing in the query param
      `maxFuzzyLevel`=3 or 4.
    syntax:
      content: >-
        function getSearchFuzzy(query: string, callback:
        ServiceCallback<SearchFuzzyResponse>)
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchFuzzyResponse>
          description: ''
      return:
        type:
          - Promise<azure-maps-rest.atlas.atlas.Models.SearchFuzzyResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchFuzzy_3
    name: getSearchFuzzy
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Free Form Search**<br><br>The basic default API is Free Form Search
      which handles the most

      fuzzy of inputs handling any combination of address or POI tokens. This
      search API is the

      canonical 'single line search'. The Free Form Search API is a seamless
      combination of POI search

      and geocoding. The API can also be weighted with a contextual position
      (lat./lon. pair), or

      fully constrained by a coordinate and radius, or it can be executed more
      generally without any

      geo biasing anchor point.<br><br>We strongly advise you to use the
      'countrySet' parameter to

      specify only the countries for which your application needs coverage, as
      the default behavior

      will be to search the entire world, potentially returning unnecessary
      results.<br><br> E.g.:

      `countrySet`=US,FR <br><br>Please see [Search

      Coverage](https://docs.microsoft.com/en-us/azure/location-based-services/geocoding-coverage)
      for

      a complete list of all the supported countries.<br><br>Most Search queries
      default to

      `maxFuzzyLevel`=2 to gain performance and also reduce unusual results.
      This new default can be

      overridden as needed per request by passing in the query param
      `maxFuzzyLevel`=3 or 4.
    syntax:
      content: >-
        function getSearchFuzzy(query: string, options:
        SearchGetSearchFuzzyOptionalParams, callback:
        ServiceCallback<SearchFuzzyResponse>)
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchFuzzyOptionalParams
          description: ''
        - id: callback
          type:
            - >-
              ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchFuzzyResponse>
          description: ''
      return:
        type:
          - Promise<azure-maps-rest.atlas.atlas.Models.SearchFuzzyResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchFuzzyWithHttpOperationResponse
    name: getSearchFuzzyWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Free Form Search**<br><br>The basic default API is Free Form Search
      which handles the most

      fuzzy of inputs handling any combination of address or POI tokens. This
      search API is the

      canonical 'single line search'. The Free Form Search API is a seamless
      combination of POI search

      and geocoding. The API can also be weighted with a contextual position
      (lat./lon. pair), or

      fully constrained by a coordinate and radius, or it can be executed more
      generally without any

      geo biasing anchor point.<br><br>We strongly advise you to use the
      'countrySet' parameter to

      specify only the countries for which your application needs coverage, as
      the default behavior

      will be to search the entire world, potentially returning unnecessary
      results.<br><br> E.g.:

      `countrySet`=US,FR <br><br>Please see [Search

      Coverage](https://docs.microsoft.com/en-us/azure/location-based-services/geocoding-coverage)
      for

      a complete list of all the supported countries.<br><br>Most Search queries
      default to

      `maxFuzzyLevel`=2 to gain performance and also reduce unusual results.
      This new default can be

      overridden as needed per request by passing in the query param
      `maxFuzzyLevel`=3 or 4.
    syntax:
      content: >-
        function getSearchFuzzyWithHttpOperationResponse(query: string,
        options?: SearchGetSearchFuzzyOptionalParams)
      parameters:
        - id: query
          type:
            - string
          description: >
            The applicable query string (e.g., "seattle", "pizza"). Can _also_
            be

            specified as a comma separated string composed by latitude followed
            by longitude (e.g.,

            "47.641268, -122.125679"). Must be properly URL encoded.
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchFuzzyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-maps-rest.atlas.atlas.Models.SearchFuzzyResponse>>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchInsideGeometryWithHttpOperationResponse
    name: getSearchInsideGeometryWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Search Geometry endpoint allows you to perform a free form search
      inside a single geometry

      or many of them. The search results that fall inside the
      geometry/geometries will be

      returned.<br><br>To send the geometry you will use a `GET` request where
      the `geometry`

      parameter is represented as a `GeoJSON` type. The geographical features to
      be searched can be

      modeled as Polygon and/or Circle geometries represented using any one of
      the following `GeoJSON`

      types:<ul><li>**GeoJSON FeatureCollection** <br>The `geometry` can be
      represented as a `GeoJSON

      FeatureCollection` object. This is the recommended option if the geometry
      contains both Polygons

      and Circles. The `FeatureCollection` can contain a max of 50 `GeoJSON
      Feature` objects. Each

      `Feature` object should represent either a Polygon or a Circle with the
      following conditions:<ul

      style="list-style-type:none"><li>A `Feature` object for the Polygon
      geometry can have a max of

      50 coordinates and it's properties must be empty.</li><li>A `Feature`
      object for the Circle

      geometry is composed of a _center_ represented using a `GeoJSON Point`
      type and a _radius_ value

      (in meters) which must be specified in the object's properties along with
      the _subType_ property

      whose value should be 'Circle'.</li></ul><br> Please see the Examples
      section below for a sample

      `FeatureCollection` representation.<br><br></li><li>**GeoJSON
      GeometryCollection**<br>The

      `geometry` can be represented as a `GeoJSON GeometryCollection` object.
      This is the recommended

      option if the geometry contains a list of Polygons only. The
      `GeometryCollection` can contain a

      max of 50 `GeoJSON Polygon` objects. Each `Polygon` object can have a max
      of 50 coordinates.

      Please see the Examples section below for a sample `GeometryCollection`

      representation.<br><br></li><li>**GeoJSON Polygon**<br>The `geometry` can
      be represented as a

      `GeoJSON Polygon` object. This is the recommended option if the geometry
      contains a single

      Polygon. The `Polygon` object can have a max of 50 coordinates. Please see
      the Examples section

      below for a sample `Polygon` representation.<br><br></li></ul>.<br><br>
    syntax:
      content: >-
        function getSearchInsideGeometryWithHttpOperationResponse(query: string,
        geometry: string, options?: SearchGetSearchInsideGeometryOptionalParams)
      parameters:
        - id: query
          type:
            - string
          description: >
            The applicable query string (e.g., "burger joints", "pizza"). Can
            _also_

            be specified as a comma separated string composed by latitude
            followed by longitude (e.g.,

            "47.641268, -122.125679"). Must be properly URL encoded.
        - id: geometry
          type:
            - string
          description: >
            This represents the geometry for one or more geographical features

            (parks, state boundary etc.) to search in and should be a GeoJSON
            compliant type. Please refer

            to [RFC 7946](https://tools.ietf.org/html/rfc7946) for details.
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchInsideGeometryOptionalParams
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-maps-rest.atlas.atlas.Models.SearchGeometryResponse>>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchNearby
    name: getSearchNearby
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Nearby Search**<br><br>If you have a use case for only retrieving POI
      results around a

      specific location, the nearby search method may be the right choice. This
      endpoint will only

      return POI results, and does not take in a search query parameter.
    syntax:
      content: 'function getSearchNearby(lat: number, lon: number)'
      parameters:
        - id: lat
          type:
            - number
          description: |
            Latitude where results should be biased. E.g. 37.337.
        - id: lon
          type:
            - number
          description: |
            Longitude where results should be biased. E.g. -121.89.
      return:
        type:
          - Promise<azure-maps-rest.atlas.atlas.Models.SearchNearbyResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchNearby_1
    name: getSearchNearby
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Nearby Search**<br><br>If you have a use case for only retrieving POI
      results around a

      specific location, the nearby search method may be the right choice. This
      endpoint will only

      return POI results, and does not take in a search query parameter.
    syntax:
      content: >-
        function getSearchNearby(lat: number, lon: number, options:
        SearchGetSearchNearbyOptionalParams)
      parameters:
        - id: lat
          type:
            - number
          description: ''
        - id: lon
          type:
            - number
          description: ''
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchNearbyOptionalParams
          description: ''
      return:
        type:
          - Promise<azure-maps-rest.atlas.atlas.Models.SearchNearbyResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchNearby_2
    name: getSearchNearby
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Nearby Search**<br><br>If you have a use case for only retrieving POI
      results around a

      specific location, the nearby search method may be the right choice. This
      endpoint will only

      return POI results, and does not take in a search query parameter.
    syntax:
      content: >-
        function getSearchNearby(lat: number, lon: number, callback:
        ServiceCallback<SearchNearbyResponse>)
      parameters:
        - id: lat
          type:
            - number
          description: ''
        - id: lon
          type:
            - number
          description: ''
        - id: callback
          type:
            - >-
              ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchNearbyResponse>
          description: ''
      return:
        type:
          - Promise<azure-maps-rest.atlas.atlas.Models.SearchNearbyResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchNearby_3
    name: getSearchNearby
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Nearby Search**<br><br>If you have a use case for only retrieving POI
      results around a

      specific location, the nearby search method may be the right choice. This
      endpoint will only

      return POI results, and does not take in a search query parameter.
    syntax:
      content: >-
        function getSearchNearby(lat: number, lon: number, options:
        SearchGetSearchNearbyOptionalParams, callback:
        ServiceCallback<SearchNearbyResponse>)
      parameters:
        - id: lat
          type:
            - number
          description: ''
        - id: lon
          type:
            - number
          description: ''
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchNearbyOptionalParams
          description: ''
        - id: callback
          type:
            - >-
              ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchNearbyResponse>
          description: ''
      return:
        type:
          - Promise<azure-maps-rest.atlas.atlas.Models.SearchNearbyResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchNearbyWithHttpOperationResponse
    name: getSearchNearbyWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Nearby Search**<br><br>If you have a use case for only retrieving POI
      results around a

      specific location, the nearby search method may be the right choice. This
      endpoint will only

      return POI results, and does not take in a search query parameter.
    syntax:
      content: >-
        function getSearchNearbyWithHttpOperationResponse(lat: number, lon:
        number, options?: SearchGetSearchNearbyOptionalParams)
      parameters:
        - id: lat
          type:
            - number
          description: |
            Latitude where results should be biased. E.g. 37.337.
        - id: lon
          type:
            - number
          description: |
            Longitude where results should be biased. E.g. -121.89.
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchNearbyOptionalParams
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-maps-rest.atlas.atlas.Models.SearchNearbyResponse>>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchPOI
    name: getSearchPOI
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Get POI by Name**<br><br>If your search use case only requires POI
      results, you may use the

      POI endpoint for searching. This endpoint will only return POI results.
    syntax:
      content: 'function getSearchPOI(query: string)'
      parameters:
        - id: query
          type:
            - string
          description: >
            The POI name to search for (e.g., "statue of liberty", "starbucks"),
            must

            be properly URL encoded.
      return:
        type:
          - Promise<azure-maps-rest.atlas.atlas.Models.SearchPoiResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchPOI_1
    name: getSearchPOI
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Get POI by Name**<br><br>If your search use case only requires POI
      results, you may use the

      POI endpoint for searching. This endpoint will only return POI results.
    syntax:
      content: >-
        function getSearchPOI(query: string, options:
        SearchGetSearchPOIOptionalParams)
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchPOIOptionalParams
          description: ''
      return:
        type:
          - Promise<azure-maps-rest.atlas.atlas.Models.SearchPoiResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchPOI_2
    name: getSearchPOI
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Get POI by Name**<br><br>If your search use case only requires POI
      results, you may use the

      POI endpoint for searching. This endpoint will only return POI results.
    syntax:
      content: >-
        function getSearchPOI(query: string, callback:
        ServiceCallback<SearchPoiResponse>)
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchPoiResponse>
          description: ''
      return:
        type:
          - Promise<azure-maps-rest.atlas.atlas.Models.SearchPoiResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchPOI_3
    name: getSearchPOI
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Get POI by Name**<br><br>If your search use case only requires POI
      results, you may use the

      POI endpoint for searching. This endpoint will only return POI results.
    syntax:
      content: >-
        function getSearchPOI(query: string, options:
        SearchGetSearchPOIOptionalParams, callback:
        ServiceCallback<SearchPoiResponse>)
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchPOIOptionalParams
          description: ''
        - id: callback
          type:
            - >-
              ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchPoiResponse>
          description: ''
      return:
        type:
          - Promise<azure-maps-rest.atlas.atlas.Models.SearchPoiResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchPOICategory
    name: getSearchPOICategory
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Get POI by Category**<br><br>If your search use case only requires POI
      results filtered by

      category, you may use the category endpoint. This endpoint will only
      return POI results which

      are categorized as specified.<br><br>List of available categories can be
      found

      [here](https://docs.microsoft.com/en-us/azure/azure-maps/search-categories).
    syntax:
      content: 'function getSearchPOICategory(query: string)'
      parameters:
        - id: query
          type:
            - string
          description: |
            The POI category to search for (e.g., "AIRPORT", "BEACH"), must be
            properly URL encoded.
      return:
        type:
          - >-
            Promise<azure-maps-rest.atlas.atlas.Models.SearchPoiCategoryResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchPOICategory_1
    name: getSearchPOICategory
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Get POI by Category**<br><br>If your search use case only requires POI
      results filtered by

      category, you may use the category endpoint. This endpoint will only
      return POI results which

      are categorized as specified.<br><br>List of available categories can be
      found

      [here](https://docs.microsoft.com/en-us/azure/azure-maps/search-categories).
    syntax:
      content: >-
        function getSearchPOICategory(query: string, options:
        SearchGetSearchPOICategoryOptionalParams)
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchPOICategoryOptionalParams
          description: ''
      return:
        type:
          - >-
            Promise<azure-maps-rest.atlas.atlas.Models.SearchPoiCategoryResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchPOICategory_2
    name: getSearchPOICategory
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Get POI by Category**<br><br>If your search use case only requires POI
      results filtered by

      category, you may use the category endpoint. This endpoint will only
      return POI results which

      are categorized as specified.<br><br>List of available categories can be
      found

      [here](https://docs.microsoft.com/en-us/azure/azure-maps/search-categories).
    syntax:
      content: >-
        function getSearchPOICategory(query: string, callback:
        ServiceCallback<SearchPoiCategoryResponse>)
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: callback
          type:
            - >-
              ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchPoiCategoryResponse>
          description: ''
      return:
        type:
          - >-
            Promise<azure-maps-rest.atlas.atlas.Models.SearchPoiCategoryResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchPOICategory_3
    name: getSearchPOICategory
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Get POI by Category**<br><br>If your search use case only requires POI
      results filtered by

      category, you may use the category endpoint. This endpoint will only
      return POI results which

      are categorized as specified.<br><br>List of available categories can be
      found

      [here](https://docs.microsoft.com/en-us/azure/azure-maps/search-categories).
    syntax:
      content: >-
        function getSearchPOICategory(query: string, options:
        SearchGetSearchPOICategoryOptionalParams, callback:
        ServiceCallback<SearchPoiCategoryResponse>)
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchPOICategoryOptionalParams
          description: ''
        - id: callback
          type:
            - >-
              ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchPoiCategoryResponse>
          description: ''
      return:
        type:
          - >-
            Promise<azure-maps-rest.atlas.atlas.Models.SearchPoiCategoryResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchPOICategoryWithHttpOperationResponse
    name: getSearchPOICategoryWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Get POI by Category**<br><br>If your search use case only requires POI
      results filtered by

      category, you may use the category endpoint. This endpoint will only
      return POI results which

      are categorized as specified.<br><br>List of available categories can be
      found

      [here](https://docs.microsoft.com/en-us/azure/azure-maps/search-categories).
    syntax:
      content: >-
        function getSearchPOICategoryWithHttpOperationResponse(query: string,
        options?: SearchGetSearchPOICategoryOptionalParams)
      parameters:
        - id: query
          type:
            - string
          description: |
            The POI category to search for (e.g., "AIRPORT", "BEACH"), must be
            properly URL encoded.
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchPOICategoryOptionalParams
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-maps-rest.atlas.atlas.Models.SearchPoiCategoryResponse>>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.getSearchPOIWithHttpOperationResponse
    name: getSearchPOIWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      **Get POI by Name**<br><br>If your search use case only requires POI
      results, you may use the

      POI endpoint for searching. This endpoint will only return POI results.
    syntax:
      content: >-
        function getSearchPOIWithHttpOperationResponse(query: string, options?:
        SearchGetSearchPOIOptionalParams)
      parameters:
        - id: query
          type:
            - string
          description: >
            The POI name to search for (e.g., "statue of liberty", "starbucks"),
            must

            be properly URL encoded.
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchGetSearchPOIOptionalParams
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-maps-rest.atlas.atlas.Models.SearchPoiResponse>>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.postSearchAlongRoute
    name: postSearchAlongRoute
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Search Along Route endpoint allows you to perform a fuzzy search for
      POIs along a specified

      route. This search is constrained by specifying the `maxDetourTime`
      limiting measure.<br><br>To

      send the route-points you will use a `POST` request where the request body
      will contain the

      `route` object represented as a `GeoJSON LineString` type and the
      `Content-Type` header will be

      set to `application/json`. Each route-point in `route` is represented as a
      `GeoJSON Position`

      type i.e. an array where the _longitude_ value is followed by the
      _latitude_ value and the

      _altitude_ value is ignored. The `route` should contain at least 2
      route-points.<br><br>It is

      possible that original route will be altered, some of it's points may be
      skipped. If the route

      that passes through the found point is faster than the original one, the
      `detourTime` value in

      the response is negative.
    syntax:
      content: >-
        function postSearchAlongRoute(query: string, maxDetourTime: number,
        searchAlongRouteRequestBody: SearchAlongRouteRequestBody)
      parameters:
        - id: query
          type:
            - string
          description: >
            The applicable query string (e.g., "burger joints", "pizza"). Can
            _also_

            be specified as a comma separated string composed by latitude
            followed by longitude (e.g.,

            "47.641268, -122.125679"). Must be properly URL encoded.
        - id: maxDetourTime
          type:
            - number
          description: |
            Maximum detour time of the point of interest in seconds. Max value
            is 3600 seconds
        - id: searchAlongRouteRequestBody
          type:
            - azure-maps-rest.atlas.atlas.Models.SearchAlongRouteRequestBody
          description: >
            This represents the route to

            search along and should be a valid `GeoJSON LineString` type. Please
            refer to [RFC

            7946](https://tools.ietf.org/html/rfc7946#section-3.1.4) for
            details.
      return:
        type:
          - Promise<azure-maps-rest.atlas.atlas.Models.SearchAlongRouteResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.postSearchAlongRoute_1
    name: postSearchAlongRoute
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Search Along Route endpoint allows you to perform a fuzzy search for
      POIs along a specified

      route. This search is constrained by specifying the `maxDetourTime`
      limiting measure.<br><br>To

      send the route-points you will use a `POST` request where the request body
      will contain the

      `route` object represented as a `GeoJSON LineString` type and the
      `Content-Type` header will be

      set to `application/json`. Each route-point in `route` is represented as a
      `GeoJSON Position`

      type i.e. an array where the _longitude_ value is followed by the
      _latitude_ value and the

      _altitude_ value is ignored. The `route` should contain at least 2
      route-points.<br><br>It is

      possible that original route will be altered, some of it's points may be
      skipped. If the route

      that passes through the found point is faster than the original one, the
      `detourTime` value in

      the response is negative.
    syntax:
      content: >-
        function postSearchAlongRoute(query: string, maxDetourTime: number,
        searchAlongRouteRequestBody: SearchAlongRouteRequestBody, options:
        SearchPostSearchAlongRouteOptionalParams)
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: maxDetourTime
          type:
            - number
          description: ''
        - id: searchAlongRouteRequestBody
          type:
            - azure-maps-rest.atlas.atlas.Models.SearchAlongRouteRequestBody
          description: ''
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchPostSearchAlongRouteOptionalParams
          description: ''
      return:
        type:
          - Promise<azure-maps-rest.atlas.atlas.Models.SearchAlongRouteResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.postSearchAlongRoute_2
    name: postSearchAlongRoute
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Search Along Route endpoint allows you to perform a fuzzy search for
      POIs along a specified

      route. This search is constrained by specifying the `maxDetourTime`
      limiting measure.<br><br>To

      send the route-points you will use a `POST` request where the request body
      will contain the

      `route` object represented as a `GeoJSON LineString` type and the
      `Content-Type` header will be

      set to `application/json`. Each route-point in `route` is represented as a
      `GeoJSON Position`

      type i.e. an array where the _longitude_ value is followed by the
      _latitude_ value and the

      _altitude_ value is ignored. The `route` should contain at least 2
      route-points.<br><br>It is

      possible that original route will be altered, some of it's points may be
      skipped. If the route

      that passes through the found point is faster than the original one, the
      `detourTime` value in

      the response is negative.
    syntax:
      content: >-
        function postSearchAlongRoute(query: string, maxDetourTime: number,
        searchAlongRouteRequestBody: SearchAlongRouteRequestBody, callback:
        ServiceCallback<SearchAlongRouteResponse>)
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: maxDetourTime
          type:
            - number
          description: ''
        - id: searchAlongRouteRequestBody
          type:
            - azure-maps-rest.atlas.atlas.Models.SearchAlongRouteRequestBody
          description: ''
        - id: callback
          type:
            - >-
              ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchAlongRouteResponse>
          description: ''
      return:
        type:
          - Promise<azure-maps-rest.atlas.atlas.Models.SearchAlongRouteResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.postSearchAlongRoute_3
    name: postSearchAlongRoute
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Search Along Route endpoint allows you to perform a fuzzy search for
      POIs along a specified

      route. This search is constrained by specifying the `maxDetourTime`
      limiting measure.<br><br>To

      send the route-points you will use a `POST` request where the request body
      will contain the

      `route` object represented as a `GeoJSON LineString` type and the
      `Content-Type` header will be

      set to `application/json`. Each route-point in `route` is represented as a
      `GeoJSON Position`

      type i.e. an array where the _longitude_ value is followed by the
      _latitude_ value and the

      _altitude_ value is ignored. The `route` should contain at least 2
      route-points.<br><br>It is

      possible that original route will be altered, some of it's points may be
      skipped. If the route

      that passes through the found point is faster than the original one, the
      `detourTime` value in

      the response is negative.
    syntax:
      content: >-
        function postSearchAlongRoute(query: string, maxDetourTime: number,
        searchAlongRouteRequestBody: SearchAlongRouteRequestBody, options:
        SearchPostSearchAlongRouteOptionalParams, callback:
        ServiceCallback<SearchAlongRouteResponse>)
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: maxDetourTime
          type:
            - number
          description: ''
        - id: searchAlongRouteRequestBody
          type:
            - azure-maps-rest.atlas.atlas.Models.SearchAlongRouteRequestBody
          description: ''
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchPostSearchAlongRouteOptionalParams
          description: ''
        - id: callback
          type:
            - >-
              ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchAlongRouteResponse>
          description: ''
      return:
        type:
          - Promise<azure-maps-rest.atlas.atlas.Models.SearchAlongRouteResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.postSearchAlongRouteWithHttpOperationResponse
    name: postSearchAlongRouteWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Search Along Route endpoint allows you to perform a fuzzy search for
      POIs along a specified

      route. This search is constrained by specifying the `maxDetourTime`
      limiting measure.<br><br>To

      send the route-points you will use a `POST` request where the request body
      will contain the

      `route` object represented as a `GeoJSON LineString` type and the
      `Content-Type` header will be

      set to `application/json`. Each route-point in `route` is represented as a
      `GeoJSON Position`

      type i.e. an array where the _longitude_ value is followed by the
      _latitude_ value and the

      _altitude_ value is ignored. The `route` should contain at least 2
      route-points.<br><br>It is

      possible that original route will be altered, some of it's points may be
      skipped. If the route

      that passes through the found point is faster than the original one, the
      `detourTime` value in

      the response is negative.
    syntax:
      content: >-
        function postSearchAlongRouteWithHttpOperationResponse(query: string,
        maxDetourTime: number, searchAlongRouteRequestBody:
        SearchAlongRouteRequestBody, options?:
        SearchPostSearchAlongRouteOptionalParams)
      parameters:
        - id: query
          type:
            - string
          description: >
            The applicable query string (e.g., "burger joints", "pizza"). Can
            _also_

            be specified as a comma separated string composed by latitude
            followed by longitude (e.g.,

            "47.641268, -122.125679"). Must be properly URL encoded.
        - id: maxDetourTime
          type:
            - number
          description: |
            Maximum detour time of the point of interest in seconds. Max value
            is 3600 seconds
        - id: searchAlongRouteRequestBody
          type:
            - azure-maps-rest.atlas.atlas.Models.SearchAlongRouteRequestBody
          description: >
            This represents the route to

            search along and should be a valid `GeoJSON LineString` type. Please
            refer to [RFC

            7946](https://tools.ietf.org/html/rfc7946#section-3.1.4) for
            details.
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchPostSearchAlongRouteOptionalParams
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-maps-rest.atlas.atlas.Models.SearchAlongRouteResponse>>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.postSearchInsideGeometry
    name: postSearchInsideGeometry
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Search Geometry endpoint allows you to perform a free form search
      inside a single geometry

      or many of them. The search results that fall inside the
      geometry/geometries will be

      returned.<br><br>To send the geometry you will use a `POST` request where
      the request body will

      contain the `geometry` object represented as a `GeoJSON` type and the
      `Content-Type` header will

      be set to `application/json`. The geographical features to be searched can
      be modeled as Polygon

      and/or Circle geometries represented using any one of the following
      `GeoJSON`

      types:<ul><li>**GeoJSON FeatureCollection** <br>The `geometry` can be
      represented as a `GeoJSON

      FeatureCollection` object. This is the recommended option if the geometry
      contains both Polygons

      and Circles. The `FeatureCollection` can contain a max of 50 `GeoJSON
      Feature` objects. Each

      `Feature` object should represent either a Polygon or a Circle with the
      following conditions:<ul

      style="list-style-type:none"><li>A `Feature` object for the Polygon
      geometry can have a max of

      50 coordinates and it's properties must be empty.</li><li>A `Feature`
      object for the Circle

      geometry is composed of a _center_ represented using a `GeoJSON Point`
      type and a _radius_ value

      (in meters) which must be specified in the object's properties along with
      the _subType_ property

      whose value should be 'Circle'.</li></ul><br> Please see the Examples
      section below for a sample

      `FeatureCollection` representation.<br><br></li><li>**GeoJSON
      GeometryCollection**<br>The

      `geometry` can be represented as a `GeoJSON GeometryCollection` object.
      This is the recommended

      option if the geometry contains a list of Polygons only. The
      `GeometryCollection` can contain a

      max of 50 `GeoJSON Polygon` objects. Each `Polygon` object can have a max
      of 50 coordinates.

      Please see the Examples section below for a sample `GeometryCollection`

      representation.<br><br></li><li>**GeoJSON Polygon**<br>The `geometry` can
      be represented as a

      `GeoJSON Polygon` object. This is the recommended option if the geometry
      contains a single

      Polygon. The `Polygon` object can have a max of 50 coordinates. Please see
      the Examples section

      below for a sample `Polygon` representation.<br><br></li></ul>.<br><br>
    syntax:
      content: >-
        function postSearchInsideGeometry(query: string,
        searchInsideGeometryRequestBody: SearchInsideGeometryRequestBody)
      parameters:
        - id: query
          type:
            - string
          description: >
            The applicable query string (e.g., "burger joints", "pizza"). Can
            _also_

            be specified as a comma separated string composed by latitude
            followed by longitude (e.g.,

            "47.641268, -122.125679"). Must be properly URL encoded.
        - id: searchInsideGeometryRequestBody
          type:
            - azure-maps-rest.atlas.atlas.Models.SearchInsideGeometryRequestBody
          description: >
            This represents the

            geometry for one or more geographical features (parks, state
            boundary etc.) to search in and

            should be a GeoJSON compliant type. Please refer to [RFC

            7946](https://tools.ietf.org/html/rfc7946) for details.
      return:
        type:
          - Promise<azure-maps-rest.atlas.atlas.Models.SearchGeometryResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.postSearchInsideGeometry_1
    name: postSearchInsideGeometry
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Search Geometry endpoint allows you to perform a free form search
      inside a single geometry

      or many of them. The search results that fall inside the
      geometry/geometries will be

      returned.<br><br>To send the geometry you will use a `POST` request where
      the request body will

      contain the `geometry` object represented as a `GeoJSON` type and the
      `Content-Type` header will

      be set to `application/json`. The geographical features to be searched can
      be modeled as Polygon

      and/or Circle geometries represented using any one of the following
      `GeoJSON`

      types:<ul><li>**GeoJSON FeatureCollection** <br>The `geometry` can be
      represented as a `GeoJSON

      FeatureCollection` object. This is the recommended option if the geometry
      contains both Polygons

      and Circles. The `FeatureCollection` can contain a max of 50 `GeoJSON
      Feature` objects. Each

      `Feature` object should represent either a Polygon or a Circle with the
      following conditions:<ul

      style="list-style-type:none"><li>A `Feature` object for the Polygon
      geometry can have a max of

      50 coordinates and it's properties must be empty.</li><li>A `Feature`
      object for the Circle

      geometry is composed of a _center_ represented using a `GeoJSON Point`
      type and a _radius_ value

      (in meters) which must be specified in the object's properties along with
      the _subType_ property

      whose value should be 'Circle'.</li></ul><br> Please see the Examples
      section below for a sample

      `FeatureCollection` representation.<br><br></li><li>**GeoJSON
      GeometryCollection**<br>The

      `geometry` can be represented as a `GeoJSON GeometryCollection` object.
      This is the recommended

      option if the geometry contains a list of Polygons only. The
      `GeometryCollection` can contain a

      max of 50 `GeoJSON Polygon` objects. Each `Polygon` object can have a max
      of 50 coordinates.

      Please see the Examples section below for a sample `GeometryCollection`

      representation.<br><br></li><li>**GeoJSON Polygon**<br>The `geometry` can
      be represented as a

      `GeoJSON Polygon` object. This is the recommended option if the geometry
      contains a single

      Polygon. The `Polygon` object can have a max of 50 coordinates. Please see
      the Examples section

      below for a sample `Polygon` representation.<br><br></li></ul>.<br><br>
    syntax:
      content: >-
        function postSearchInsideGeometry(query: string,
        searchInsideGeometryRequestBody: SearchInsideGeometryRequestBody,
        options: SearchPostSearchInsideGeometryOptionalParams)
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: searchInsideGeometryRequestBody
          type:
            - azure-maps-rest.atlas.atlas.Models.SearchInsideGeometryRequestBody
          description: ''
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchPostSearchInsideGeometryOptionalParams
          description: ''
      return:
        type:
          - Promise<azure-maps-rest.atlas.atlas.Models.SearchGeometryResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.postSearchInsideGeometry_2
    name: postSearchInsideGeometry
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Search Geometry endpoint allows you to perform a free form search
      inside a single geometry

      or many of them. The search results that fall inside the
      geometry/geometries will be

      returned.<br><br>To send the geometry you will use a `POST` request where
      the request body will

      contain the `geometry` object represented as a `GeoJSON` type and the
      `Content-Type` header will

      be set to `application/json`. The geographical features to be searched can
      be modeled as Polygon

      and/or Circle geometries represented using any one of the following
      `GeoJSON`

      types:<ul><li>**GeoJSON FeatureCollection** <br>The `geometry` can be
      represented as a `GeoJSON

      FeatureCollection` object. This is the recommended option if the geometry
      contains both Polygons

      and Circles. The `FeatureCollection` can contain a max of 50 `GeoJSON
      Feature` objects. Each

      `Feature` object should represent either a Polygon or a Circle with the
      following conditions:<ul

      style="list-style-type:none"><li>A `Feature` object for the Polygon
      geometry can have a max of

      50 coordinates and it's properties must be empty.</li><li>A `Feature`
      object for the Circle

      geometry is composed of a _center_ represented using a `GeoJSON Point`
      type and a _radius_ value

      (in meters) which must be specified in the object's properties along with
      the _subType_ property

      whose value should be 'Circle'.</li></ul><br> Please see the Examples
      section below for a sample

      `FeatureCollection` representation.<br><br></li><li>**GeoJSON
      GeometryCollection**<br>The

      `geometry` can be represented as a `GeoJSON GeometryCollection` object.
      This is the recommended

      option if the geometry contains a list of Polygons only. The
      `GeometryCollection` can contain a

      max of 50 `GeoJSON Polygon` objects. Each `Polygon` object can have a max
      of 50 coordinates.

      Please see the Examples section below for a sample `GeometryCollection`

      representation.<br><br></li><li>**GeoJSON Polygon**<br>The `geometry` can
      be represented as a

      `GeoJSON Polygon` object. This is the recommended option if the geometry
      contains a single

      Polygon. The `Polygon` object can have a max of 50 coordinates. Please see
      the Examples section

      below for a sample `Polygon` representation.<br><br></li></ul>.<br><br>
    syntax:
      content: >-
        function postSearchInsideGeometry(query: string,
        searchInsideGeometryRequestBody: SearchInsideGeometryRequestBody,
        callback: ServiceCallback<SearchGeometryResponse>)
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: searchInsideGeometryRequestBody
          type:
            - azure-maps-rest.atlas.atlas.Models.SearchInsideGeometryRequestBody
          description: ''
        - id: callback
          type:
            - >-
              ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchGeometryResponse>
          description: ''
      return:
        type:
          - Promise<azure-maps-rest.atlas.atlas.Models.SearchGeometryResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.postSearchInsideGeometry_3
    name: postSearchInsideGeometry
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Search Geometry endpoint allows you to perform a free form search
      inside a single geometry

      or many of them. The search results that fall inside the
      geometry/geometries will be

      returned.<br><br>To send the geometry you will use a `POST` request where
      the request body will

      contain the `geometry` object represented as a `GeoJSON` type and the
      `Content-Type` header will

      be set to `application/json`. The geographical features to be searched can
      be modeled as Polygon

      and/or Circle geometries represented using any one of the following
      `GeoJSON`

      types:<ul><li>**GeoJSON FeatureCollection** <br>The `geometry` can be
      represented as a `GeoJSON

      FeatureCollection` object. This is the recommended option if the geometry
      contains both Polygons

      and Circles. The `FeatureCollection` can contain a max of 50 `GeoJSON
      Feature` objects. Each

      `Feature` object should represent either a Polygon or a Circle with the
      following conditions:<ul

      style="list-style-type:none"><li>A `Feature` object for the Polygon
      geometry can have a max of

      50 coordinates and it's properties must be empty.</li><li>A `Feature`
      object for the Circle

      geometry is composed of a _center_ represented using a `GeoJSON Point`
      type and a _radius_ value

      (in meters) which must be specified in the object's properties along with
      the _subType_ property

      whose value should be 'Circle'.</li></ul><br> Please see the Examples
      section below for a sample

      `FeatureCollection` representation.<br><br></li><li>**GeoJSON
      GeometryCollection**<br>The

      `geometry` can be represented as a `GeoJSON GeometryCollection` object.
      This is the recommended

      option if the geometry contains a list of Polygons only. The
      `GeometryCollection` can contain a

      max of 50 `GeoJSON Polygon` objects. Each `Polygon` object can have a max
      of 50 coordinates.

      Please see the Examples section below for a sample `GeometryCollection`

      representation.<br><br></li><li>**GeoJSON Polygon**<br>The `geometry` can
      be represented as a

      `GeoJSON Polygon` object. This is the recommended option if the geometry
      contains a single

      Polygon. The `Polygon` object can have a max of 50 coordinates. Please see
      the Examples section

      below for a sample `Polygon` representation.<br><br></li></ul>.<br><br>
    syntax:
      content: >-
        function postSearchInsideGeometry(query: string,
        searchInsideGeometryRequestBody: SearchInsideGeometryRequestBody,
        options: SearchPostSearchInsideGeometryOptionalParams, callback:
        ServiceCallback<SearchGeometryResponse>)
      parameters:
        - id: query
          type:
            - string
          description: ''
        - id: searchInsideGeometryRequestBody
          type:
            - azure-maps-rest.atlas.atlas.Models.SearchInsideGeometryRequestBody
          description: ''
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchPostSearchInsideGeometryOptionalParams
          description: ''
        - id: callback
          type:
            - >-
              ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchGeometryResponse>
          description: ''
      return:
        type:
          - Promise<azure-maps-rest.atlas.atlas.Models.SearchGeometryResponse>
    package: azure-maps-rest
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search.postSearchInsideGeometryWithHttpOperationResponse
    name: postSearchInsideGeometryWithHttpOperationResponse
    children: []
    type: method
    langs:
      - typeScript
    summary: >-
      The Search Geometry endpoint allows you to perform a free form search
      inside a single geometry

      or many of them. The search results that fall inside the
      geometry/geometries will be

      returned.<br><br>To send the geometry you will use a `POST` request where
      the request body will

      contain the `geometry` object represented as a `GeoJSON` type and the
      `Content-Type` header will

      be set to `application/json`. The geographical features to be searched can
      be modeled as Polygon

      and/or Circle geometries represented using any one of the following
      `GeoJSON`

      types:<ul><li>**GeoJSON FeatureCollection** <br>The `geometry` can be
      represented as a `GeoJSON

      FeatureCollection` object. This is the recommended option if the geometry
      contains both Polygons

      and Circles. The `FeatureCollection` can contain a max of 50 `GeoJSON
      Feature` objects. Each

      `Feature` object should represent either a Polygon or a Circle with the
      following conditions:<ul

      style="list-style-type:none"><li>A `Feature` object for the Polygon
      geometry can have a max of

      50 coordinates and it's properties must be empty.</li><li>A `Feature`
      object for the Circle

      geometry is composed of a _center_ represented using a `GeoJSON Point`
      type and a _radius_ value

      (in meters) which must be specified in the object's properties along with
      the _subType_ property

      whose value should be 'Circle'.</li></ul><br> Please see the Examples
      section below for a sample

      `FeatureCollection` representation.<br><br></li><li>**GeoJSON
      GeometryCollection**<br>The

      `geometry` can be represented as a `GeoJSON GeometryCollection` object.
      This is the recommended

      option if the geometry contains a list of Polygons only. The
      `GeometryCollection` can contain a

      max of 50 `GeoJSON Polygon` objects. Each `Polygon` object can have a max
      of 50 coordinates.

      Please see the Examples section below for a sample `GeometryCollection`

      representation.<br><br></li><li>**GeoJSON Polygon**<br>The `geometry` can
      be represented as a

      `GeoJSON Polygon` object. This is the recommended option if the geometry
      contains a single

      Polygon. The `Polygon` object can have a max of 50 coordinates. Please see
      the Examples section

      below for a sample `Polygon` representation.<br><br></li></ul>.<br><br>
    syntax:
      content: >-
        function postSearchInsideGeometryWithHttpOperationResponse(query:
        string, searchInsideGeometryRequestBody:
        SearchInsideGeometryRequestBody, options?:
        SearchPostSearchInsideGeometryOptionalParams)
      parameters:
        - id: query
          type:
            - string
          description: >
            The applicable query string (e.g., "burger joints", "pizza"). Can
            _also_

            be specified as a comma separated string composed by latitude
            followed by longitude (e.g.,

            "47.641268, -122.125679"). Must be properly URL encoded.
        - id: searchInsideGeometryRequestBody
          type:
            - azure-maps-rest.atlas.atlas.Models.SearchInsideGeometryRequestBody
          description: >
            This represents the

            geometry for one or more geographical features (parks, state
            boundary etc.) to search in and

            should be a GeoJSON compliant type. Please refer to [RFC

            7946](https://tools.ietf.org/html/rfc7946) for details.
        - id: options
          type:
            - >-
              azure-maps-rest.atlas.atlas.Models.SearchPostSearchInsideGeometryOptionalParams
          description: ''
          optional: true
      return:
        type:
          - >-
            Promise<HttpOperationResponse<azure-maps-rest.atlas.atlas.Models.SearchGeometryResponse>>
    package: azure-maps-rest
references:
  - uid: azure-maps-rest.atlas.atlas.Models.ErrorModel
    spec.typeScript:
      - name: ErrorModel
        fullName: ErrorModel
        uid: azure-maps-rest.atlas.atlas.Models.ErrorModel
  - uid: 'azure-maps-rest.atlas.atlas.Models.GeoJSONFeatureCollectionFeaturesItem[]'
    spec.typeScript:
      - name: GeoJSONFeatureCollectionFeaturesItem
        fullName: GeoJSONFeatureCollectionFeaturesItem
        uid: >-
          azure-maps-rest.atlas.atlas.Models.GeoJSONFeatureCollectionFeaturesItem
      - name: '[]'
        fullName: '[]'
  - uid: >-
      azure-maps-rest.atlas.atlas.Models.GeoJSONFeatureCollectionFeaturesItemGeometry
    spec.typeScript:
      - name: GeoJSONFeatureCollectionFeaturesItemGeometry
        fullName: GeoJSONFeatureCollectionFeaturesItemGeometry
        uid: >-
          azure-maps-rest.atlas.atlas.Models.GeoJSONFeatureCollectionFeaturesItemGeometry
  - uid: azure-maps-rest.atlas.atlas.Models.GeoJSONGeometryType
    spec.typeScript:
      - name: GeoJSONGeometryType
        fullName: GeoJSONGeometryType
        uid: azure-maps-rest.atlas.atlas.Models.GeoJSONGeometryType
  - uid: 'azure-maps-rest.atlas.atlas.Models.RouteOptimizedWaypoint[]'
    spec.typeScript:
      - name: RouteOptimizedWaypoint
        fullName: RouteOptimizedWaypoint
        uid: azure-maps-rest.atlas.atlas.Models.RouteOptimizedWaypoint
      - name: '[]'
        fullName: '[]'
  - uid: azure-maps-rest.atlas.atlas.Models.RouteResponseReport
    spec.typeScript:
      - name: RouteResponseReport
        fullName: RouteResponseReport
        uid: azure-maps-rest.atlas.atlas.Models.RouteResponseReport
  - uid: 'azure-maps-rest.atlas.atlas.Models.RouteDirectionsResult[]'
    spec.typeScript:
      - name: RouteDirectionsResult
        fullName: RouteDirectionsResult
        uid: azure-maps-rest.atlas.atlas.Models.RouteDirectionsResult
      - name: '[]'
        fullName: '[]'
  - uid: azure-maps-rest.atlas.atlas.Models.RouteResultGuidance
    spec.typeScript:
      - name: RouteResultGuidance
        fullName: RouteResultGuidance
        uid: azure-maps-rest.atlas.atlas.Models.RouteResultGuidance
  - uid: 'azure-maps-rest.atlas.atlas.Models.RouteResultLeg[]'
    spec.typeScript:
      - name: RouteResultLeg
        fullName: RouteResultLeg
        uid: azure-maps-rest.atlas.atlas.Models.RouteResultLeg
      - name: '[]'
        fullName: '[]'
  - uid: 'azure-maps-rest.atlas.atlas.Models.RouteResultSection[]'
    spec.typeScript:
      - name: RouteResultSection
        fullName: RouteResultSection
        uid: azure-maps-rest.atlas.atlas.Models.RouteResultSection
      - name: '[]'
        fullName: '[]'
  - uid: azure-maps-rest.atlas.atlas.Models.RouteDirectionsSummary
    spec.typeScript:
      - name: RouteDirectionsSummary
        fullName: RouteDirectionsSummary
        uid: azure-maps-rest.atlas.atlas.Models.RouteDirectionsSummary
  - uid: azure-maps-rest.atlas.atlas.Models.AlternativeRouteType
    spec.typeScript:
      - name: AlternativeRouteType
        fullName: AlternativeRouteType
        uid: azure-maps-rest.atlas.atlas.Models.AlternativeRouteType
  - uid: azure-maps-rest.atlas.atlas.Models.Avoid
    spec.typeScript:
      - name: Avoid
        fullName: Avoid
        uid: azure-maps-rest.atlas.atlas.Models.Avoid
  - uid: azure-maps-rest.atlas.atlas.Models.ComputeTravelTimeFor
    spec.typeScript:
      - name: ComputeTravelTimeFor
        fullName: ComputeTravelTimeFor
        uid: azure-maps-rest.atlas.atlas.Models.ComputeTravelTimeFor
  - uid: azure-maps-rest.atlas.atlas.Models.Hilliness
    spec.typeScript:
      - name: Hilliness
        fullName: Hilliness
        uid: azure-maps-rest.atlas.atlas.Models.Hilliness
  - uid: azure-maps-rest.atlas.atlas.Models.RouteInstructionsType
    spec.typeScript:
      - name: RouteInstructionsType
        fullName: RouteInstructionsType
        uid: azure-maps-rest.atlas.atlas.Models.RouteInstructionsType
  - uid: azure-maps-rest.atlas.atlas.Models.RouteRepresentation
    spec.typeScript:
      - name: RouteRepresentation
        fullName: RouteRepresentation
        uid: azure-maps-rest.atlas.atlas.Models.RouteRepresentation
  - uid: azure-maps-rest.atlas.atlas.Models.RouteType
    spec.typeScript:
      - name: RouteType
        fullName: RouteType
        uid: azure-maps-rest.atlas.atlas.Models.RouteType
  - uid: azure-maps-rest.atlas.atlas.Models.SectionType
    spec.typeScript:
      - name: SectionType
        fullName: SectionType
        uid: azure-maps-rest.atlas.atlas.Models.SectionType
  - uid: azure-maps-rest.atlas.atlas.Models.TravelMode
    spec.typeScript:
      - name: TravelMode
        fullName: TravelMode
        uid: azure-maps-rest.atlas.atlas.Models.TravelMode
  - uid: azure-maps-rest.atlas.atlas.Models.VehicleEngineType
    spec.typeScript:
      - name: VehicleEngineType
        fullName: VehicleEngineType
        uid: azure-maps-rest.atlas.atlas.Models.VehicleEngineType
  - uid: azure-maps-rest.atlas.atlas.Models.VehicleLoadType
    spec.typeScript:
      - name: VehicleLoadType
        fullName: VehicleLoadType
        uid: azure-maps-rest.atlas.atlas.Models.VehicleLoadType
  - uid: azure-maps-rest.atlas.atlas.Models.Windingness
    spec.typeScript:
      - name: Windingness
        fullName: Windingness
        uid: azure-maps-rest.atlas.atlas.Models.Windingness
  - uid: azure-maps-rest.atlas.atlas.Models.GeoJSONMultiPoint
    spec.typeScript:
      - name: GeoJSONMultiPoint
        fullName: GeoJSONMultiPoint
        uid: azure-maps-rest.atlas.atlas.Models.GeoJSONMultiPoint
  - uid: 'azure-maps-rest.atlas.atlas.Models.RouteMatrixResult[][]'
    spec.typeScript:
      - name: RouteMatrixResult
        fullName: RouteMatrixResult
        uid: azure-maps-rest.atlas.atlas.Models.RouteMatrixResult
      - name: '[][]'
        fullName: '[][]'
  - uid: azure-maps-rest.atlas.atlas.Models.RouteMatrixSummary
    spec.typeScript:
      - name: RouteMatrixSummary
        fullName: RouteMatrixSummary
        uid: azure-maps-rest.atlas.atlas.Models.RouteMatrixSummary
  - uid: azure-maps-rest.atlas.atlas.Models.RouteMatrixResultResponse
    spec.typeScript:
      - name: RouteMatrixResultResponse
        fullName: RouteMatrixResultResponse
        uid: azure-maps-rest.atlas.atlas.Models.RouteMatrixResultResponse
  - uid: azure-maps-rest.atlas.atlas.Models.RouteResultLegSummary
    spec.typeScript:
      - name: RouteResultLegSummary
        fullName: RouteResultLegSummary
        uid: azure-maps-rest.atlas.atlas.Models.RouteResultLegSummary
  - uid: 'azure-maps-rest.atlas.atlas.Models.Coordinate[]'
    spec.typeScript:
      - name: Coordinate
        fullName: Coordinate
        uid: azure-maps-rest.atlas.atlas.Models.Coordinate
      - name: '[]'
        fullName: '[]'
  - uid: azure-maps-rest.atlas.atlas.Models.Coordinate
    spec.typeScript:
      - name: Coordinate
        fullName: Coordinate
        uid: azure-maps-rest.atlas.atlas.Models.Coordinate
  - uid: azure-maps-rest.atlas.atlas.Models.RouteRange
    spec.typeScript:
      - name: RouteRange
        fullName: RouteRange
        uid: azure-maps-rest.atlas.atlas.Models.RouteRange
  - uid: 'azure-maps-rest.atlas.atlas.Models.RouteResponseReportEffectiveSetting[]'
    spec.typeScript:
      - name: RouteResponseReportEffectiveSetting
        fullName: RouteResponseReportEffectiveSetting
        uid: azure-maps-rest.atlas.atlas.Models.RouteResponseReportEffectiveSetting
      - name: '[]'
        fullName: '[]'
  - uid: 'azure-maps-rest.atlas.atlas.Models.RouteResultInstructionGroup[]'
    spec.typeScript:
      - name: RouteResultInstructionGroup
        fullName: RouteResultInstructionGroup
        uid: azure-maps-rest.atlas.atlas.Models.RouteResultInstructionGroup
      - name: '[]'
        fullName: '[]'
  - uid: 'azure-maps-rest.atlas.atlas.Models.RouteResultInstruction[]'
    spec.typeScript:
      - name: RouteResultInstruction
        fullName: RouteResultInstruction
        uid: azure-maps-rest.atlas.atlas.Models.RouteResultInstruction
      - name: '[]'
        fullName: '[]'
  - uid: azure-maps-rest.atlas.atlas.Models.DrivingSide
    spec.typeScript:
      - name: DrivingSide
        fullName: DrivingSide
        uid: azure-maps-rest.atlas.atlas.Models.DrivingSide
  - uid: azure-maps-rest.atlas.atlas.Models.GuidanceInstructionType
    spec.typeScript:
      - name: GuidanceInstructionType
        fullName: GuidanceInstructionType
        uid: azure-maps-rest.atlas.atlas.Models.GuidanceInstructionType
  - uid: azure-maps-rest.atlas.atlas.Models.GuidanceManeuver
    spec.typeScript:
      - name: GuidanceManeuver
        fullName: GuidanceManeuver
        uid: azure-maps-rest.atlas.atlas.Models.GuidanceManeuver
  - uid: azure-maps-rest.atlas.atlas.Models.MagnitudeOfDelay
    spec.typeScript:
      - name: MagnitudeOfDelay
        fullName: MagnitudeOfDelay
        uid: azure-maps-rest.atlas.atlas.Models.MagnitudeOfDelay
  - uid: azure-maps-rest.atlas.atlas.Models.RouteResultSectionTec
    spec.typeScript:
      - name: RouteResultSectionTec
        fullName: RouteResultSectionTec
        uid: azure-maps-rest.atlas.atlas.Models.RouteResultSectionTec
  - uid: 'azure-maps-rest.atlas.atlas.Models.RouteResultSectionTecCause[]'
    spec.typeScript:
      - name: RouteResultSectionTecCause
        fullName: RouteResultSectionTecCause
        uid: azure-maps-rest.atlas.atlas.Models.RouteResultSectionTecCause
      - name: '[]'
        fullName: '[]'
  - uid: 'azure-maps-rest.atlas.atlas.Models.SearchAddressResult[]'
    spec.typeScript:
      - name: SearchAddressResult
        fullName: SearchAddressResult
        uid: azure-maps-rest.atlas.atlas.Models.SearchAddressResult
      - name: '[]'
        fullName: '[]'
  - uid: azure-maps-rest.atlas.atlas.Models.SearchAddressSummary
    spec.typeScript:
      - name: SearchAddressSummary
        fullName: SearchAddressSummary
        uid: azure-maps-rest.atlas.atlas.Models.SearchAddressSummary
  - uid: azure-maps-rest.atlas.atlas.Models.SearchResultAddress
    spec.typeScript:
      - name: SearchResultAddress
        fullName: SearchResultAddress
        uid: azure-maps-rest.atlas.atlas.Models.SearchResultAddress
  - uid: 'azure-maps-rest.atlas.atlas.Models.SearchResultEntryPoint[]'
    spec.typeScript:
      - name: SearchResultEntryPoint
        fullName: SearchResultEntryPoint
        uid: azure-maps-rest.atlas.atlas.Models.SearchResultEntryPoint
      - name: '[]'
        fullName: '[]'
  - uid: azure-maps-rest.atlas.atlas.Models.CoordinateAbbreviated
    spec.typeScript:
      - name: CoordinateAbbreviated
        fullName: CoordinateAbbreviated
        uid: azure-maps-rest.atlas.atlas.Models.CoordinateAbbreviated
  - uid: azure-maps-rest.atlas.atlas.Models.SearchResultViewport
    spec.typeScript:
      - name: SearchResultViewport
        fullName: SearchResultViewport
        uid: azure-maps-rest.atlas.atlas.Models.SearchResultViewport
  - uid: 'azure-maps-rest.atlas.atlas.Models.SearchAddressReverseCrossStreetResult[]'
    spec.typeScript:
      - name: SearchAddressReverseCrossStreetResult
        fullName: SearchAddressReverseCrossStreetResult
        uid: >-
          azure-maps-rest.atlas.atlas.Models.SearchAddressReverseCrossStreetResult
      - name: '[]'
        fullName: '[]'
  - uid: azure-maps-rest.atlas.atlas.Models.SearchAddressReverseCrossStreetSummary
    spec.typeScript:
      - name: SearchAddressReverseCrossStreetSummary
        fullName: SearchAddressReverseCrossStreetSummary
        uid: >-
          azure-maps-rest.atlas.atlas.Models.SearchAddressReverseCrossStreetSummary
  - uid: 'azure-maps-rest.atlas.atlas.Models.SearchAddressReverseResult[]'
    spec.typeScript:
      - name: SearchAddressReverseResult
        fullName: SearchAddressReverseResult
        uid: azure-maps-rest.atlas.atlas.Models.SearchAddressReverseResult
      - name: '[]'
        fullName: '[]'
  - uid: azure-maps-rest.atlas.atlas.Models.SearchAddressReverseSummary
    spec.typeScript:
      - name: SearchAddressReverseSummary
        fullName: SearchAddressReverseSummary
        uid: azure-maps-rest.atlas.atlas.Models.SearchAddressReverseSummary
  - uid: 'azure-maps-rest.atlas.atlas.Models.SearchAddressStructuredResult[]'
    spec.typeScript:
      - name: SearchAddressStructuredResult
        fullName: SearchAddressStructuredResult
        uid: azure-maps-rest.atlas.atlas.Models.SearchAddressStructuredResult
      - name: '[]'
        fullName: '[]'
  - uid: azure-maps-rest.atlas.atlas.Models.SearchAddressStructuredSummary
    spec.typeScript:
      - name: SearchAddressStructuredSummary
        fullName: SearchAddressStructuredSummary
        uid: azure-maps-rest.atlas.atlas.Models.SearchAddressStructuredSummary
  - uid: azure-maps-rest.atlas.atlas.Models.SearchResultAddressRanges
    spec.typeScript:
      - name: SearchResultAddressRanges
        fullName: SearchResultAddressRanges
        uid: azure-maps-rest.atlas.atlas.Models.SearchResultAddressRanges
  - uid: azure-maps-rest.atlas.atlas.Models.SearchSummaryGeoBias
    spec.typeScript:
      - name: SearchSummaryGeoBias
        fullName: SearchSummaryGeoBias
        uid: azure-maps-rest.atlas.atlas.Models.SearchSummaryGeoBias
  - uid: azure-maps-rest.atlas.atlas.Models.GeoJSONLineString
    spec.typeScript:
      - name: GeoJSONLineString
        fullName: GeoJSONLineString
        uid: azure-maps-rest.atlas.atlas.Models.GeoJSONLineString
  - uid: 'azure-maps-rest.atlas.atlas.Models.SearchAlongRouteResult[]'
    spec.typeScript:
      - name: SearchAlongRouteResult
        fullName: SearchAlongRouteResult
        uid: azure-maps-rest.atlas.atlas.Models.SearchAlongRouteResult
      - name: '[]'
        fullName: '[]'
  - uid: azure-maps-rest.atlas.atlas.Models.SearchAlongRouteSummary
    spec.typeScript:
      - name: SearchAlongRouteSummary
        fullName: SearchAlongRouteSummary
        uid: azure-maps-rest.atlas.atlas.Models.SearchAlongRouteSummary
  - uid: azure-maps-rest.atlas.atlas.Models.SearchResultPoi
    spec.typeScript:
      - name: SearchResultPoi
        fullName: SearchResultPoi
        uid: azure-maps-rest.atlas.atlas.Models.SearchResultPoi
  - uid: 'azure-maps-rest.atlas.atlas.Models.SearchFuzzyResult[]'
    spec.typeScript:
      - name: SearchFuzzyResult
        fullName: SearchFuzzyResult
        uid: azure-maps-rest.atlas.atlas.Models.SearchFuzzyResult
      - name: '[]'
        fullName: '[]'
  - uid: azure-maps-rest.atlas.atlas.Models.SearchFuzzySummary
    spec.typeScript:
      - name: SearchFuzzySummary
        fullName: SearchFuzzySummary
        uid: azure-maps-rest.atlas.atlas.Models.SearchFuzzySummary
  - uid: 'azure-maps-rest.atlas.atlas.Models.SearchGeometryResult[]'
    spec.typeScript:
      - name: SearchGeometryResult
        fullName: SearchGeometryResult
        uid: azure-maps-rest.atlas.atlas.Models.SearchGeometryResult
      - name: '[]'
        fullName: '[]'
  - uid: azure-maps-rest.atlas.atlas.Models.SearchGeometrySummary
    spec.typeScript:
      - name: SearchGeometrySummary
        fullName: SearchGeometrySummary
        uid: azure-maps-rest.atlas.atlas.Models.SearchGeometrySummary
  - uid: 'azure-maps-rest.atlas.atlas.Models.SearchIndexSet[]'
    spec.typeScript:
      - name: SearchIndexSet
        fullName: SearchIndexSet
        uid: azure-maps-rest.atlas.atlas.Models.SearchIndexSet
      - name: '[]'
        fullName: '[]'
  - uid: 'azure-maps-rest.atlas.atlas.Models.SearchNearbyResult[]'
    spec.typeScript:
      - name: SearchNearbyResult
        fullName: SearchNearbyResult
        uid: azure-maps-rest.atlas.atlas.Models.SearchNearbyResult
      - name: '[]'
        fullName: '[]'
  - uid: azure-maps-rest.atlas.atlas.Models.SearchNearbySummary
    spec.typeScript:
      - name: SearchNearbySummary
        fullName: SearchNearbySummary
        uid: azure-maps-rest.atlas.atlas.Models.SearchNearbySummary
  - uid: 'azure-maps-rest.atlas.atlas.Models.SearchPoiCategoryResult[]'
    spec.typeScript:
      - name: SearchPoiCategoryResult
        fullName: SearchPoiCategoryResult
        uid: azure-maps-rest.atlas.atlas.Models.SearchPoiCategoryResult
      - name: '[]'
        fullName: '[]'
  - uid: azure-maps-rest.atlas.atlas.Models.SearchPoiCategorySummary
    spec.typeScript:
      - name: SearchPoiCategorySummary
        fullName: SearchPoiCategorySummary
        uid: azure-maps-rest.atlas.atlas.Models.SearchPoiCategorySummary
  - uid: 'azure-maps-rest.atlas.atlas.Models.SearchPoiResult[]'
    spec.typeScript:
      - name: SearchPoiResult
        fullName: SearchPoiResult
        uid: azure-maps-rest.atlas.atlas.Models.SearchPoiResult
      - name: '[]'
        fullName: '[]'
  - uid: azure-maps-rest.atlas.atlas.Models.SearchPoiSummary
    spec.typeScript:
      - name: SearchPoiSummary
        fullName: SearchPoiSummary
        uid: azure-maps-rest.atlas.atlas.Models.SearchPoiSummary
  - uid: 'azure-maps-rest.atlas.atlas.Models.SearchPolygonResult[]'
    spec.typeScript:
      - name: SearchPolygonResult
        fullName: SearchPolygonResult
        uid: azure-maps-rest.atlas.atlas.Models.SearchPolygonResult
      - name: '[]'
        fullName: '[]'
  - uid: azure-maps-rest.atlas.atlas.Models.Type
    spec.typeScript:
      - name: Type
        fullName: Type
        uid: azure-maps-rest.atlas.atlas.Models.Type
  - uid: 'azure-maps-rest.atlas.atlas.Models.SearchResultPoiClassification[]'
    spec.typeScript:
      - name: SearchResultPoiClassification
        fullName: SearchResultPoiClassification
        uid: azure-maps-rest.atlas.atlas.Models.SearchResultPoiClassification
      - name: '[]'
        fullName: '[]'
  - uid: 'azure-maps-rest.atlas.atlas.Models.SearchResultPoiClassificationName[]'
    spec.typeScript:
      - name: SearchResultPoiClassificationName
        fullName: SearchResultPoiClassificationName
        uid: azure-maps-rest.atlas.atlas.Models.SearchResultPoiClassificationName
      - name: '[]'
        fullName: '[]'
  - uid: azure-maps-rest.atlas.atlas.Models.RouteDirectionsResponse
    spec.typeScript:
      - name: RouteDirectionsResponse
        fullName: RouteDirectionsResponse
        uid: azure-maps-rest.atlas.atlas.Models.RouteDirectionsResponse
  - uid: azure-maps-rest.atlas.atlas.service.atlas.service.geojson.SearchResponse
    spec.typeScript:
      - name: SearchResponse
        fullName: SearchResponse
        uid: >-
          azure-maps-rest.atlas.atlas.service.atlas.service.geojson.SearchResponse
  - uid: >-
      azure-maps-rest.atlas.atlas.service.atlas.service.geojson.SearchReverseResponse
    spec.typeScript:
      - name: SearchReverseResponse
        fullName: SearchReverseResponse
        uid: >-
          azure-maps-rest.atlas.atlas.service.atlas.service.geojson.SearchReverseResponse
  - uid: azure-maps-rest.atlas.atlas.service.MapsClientContext
    spec.typeScript:
      - name: MapsClientContext
        fullName: MapsClientContext
        uid: azure-maps-rest.atlas.atlas.service.MapsClientContext
  - uid: Promise<azure-maps-rest.atlas.atlas.Models.RouteDirectionsResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: RouteDirectionsResponse
        fullName: RouteDirectionsResponse
        uid: azure-maps-rest.atlas.atlas.Models.RouteDirectionsResponse
      - name: '>'
        fullName: '>'
  - uid: azure-maps-rest.atlas.atlas.Models.RouteGetRouteDirectionsOptionalParams
    spec.typeScript:
      - name: RouteGetRouteDirectionsOptionalParams
        fullName: RouteGetRouteDirectionsOptionalParams
        uid: >-
          azure-maps-rest.atlas.atlas.Models.RouteGetRouteDirectionsOptionalParams
  - uid: >-
      ServiceCallback<azure-maps-rest.atlas.atlas.Models.RouteDirectionsResponse>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: RouteDirectionsResponse
        fullName: RouteDirectionsResponse
        uid: azure-maps-rest.atlas.atlas.Models.RouteDirectionsResponse
      - name: '>'
        fullName: '>'
  - uid: >-
      Promise<HttpOperationResponse<azure-maps-rest.atlas.atlas.Models.RouteDirectionsResponse>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: RouteDirectionsResponse
        fullName: RouteDirectionsResponse
        uid: azure-maps-rest.atlas.atlas.Models.RouteDirectionsResponse
      - name: '>>'
        fullName: '>>'
  - uid: Promise<azure-maps-rest.atlas.atlas.Models.SearchAddressResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: SearchAddressResponse
        fullName: SearchAddressResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchAddressResponse
      - name: '>'
        fullName: '>'
  - uid: azure-maps-rest.atlas.atlas.Models.SearchGetSearchAddressOptionalParams
    spec.typeScript:
      - name: SearchGetSearchAddressOptionalParams
        fullName: SearchGetSearchAddressOptionalParams
        uid: >-
          azure-maps-rest.atlas.atlas.Models.SearchGetSearchAddressOptionalParams
  - uid: ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchAddressResponse>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SearchAddressResponse
        fullName: SearchAddressResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchAddressResponse
      - name: '>'
        fullName: '>'
  - uid: Promise<azure-maps-rest.atlas.atlas.Models.SearchAddressReverseResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: SearchAddressReverseResponse
        fullName: SearchAddressReverseResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchAddressReverseResponse
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-maps-rest.atlas.atlas.Models.SearchGetSearchAddressReverseOptionalParams
    spec.typeScript:
      - name: SearchGetSearchAddressReverseOptionalParams
        fullName: SearchGetSearchAddressReverseOptionalParams
        uid: >-
          azure-maps-rest.atlas.atlas.Models.SearchGetSearchAddressReverseOptionalParams
  - uid: >-
      ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchAddressReverseResponse>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SearchAddressReverseResponse
        fullName: SearchAddressReverseResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchAddressReverseResponse
      - name: '>'
        fullName: '>'
  - uid: >-
      Promise<azure-maps-rest.atlas.atlas.Models.SearchAddressReverseCrossStreetResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: SearchAddressReverseCrossStreetResponse
        fullName: SearchAddressReverseCrossStreetResponse
        uid: >-
          azure-maps-rest.atlas.atlas.Models.SearchAddressReverseCrossStreetResponse
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-maps-rest.atlas.atlas.Models.SearchGetSearchAddressReverseCrossStreetOptionalParams
    spec.typeScript:
      - name: SearchGetSearchAddressReverseCrossStreetOptionalParams
        fullName: SearchGetSearchAddressReverseCrossStreetOptionalParams
        uid: >-
          azure-maps-rest.atlas.atlas.Models.SearchGetSearchAddressReverseCrossStreetOptionalParams
  - uid: >-
      ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchAddressReverseCrossStreetResponse>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SearchAddressReverseCrossStreetResponse
        fullName: SearchAddressReverseCrossStreetResponse
        uid: >-
          azure-maps-rest.atlas.atlas.Models.SearchAddressReverseCrossStreetResponse
      - name: '>'
        fullName: '>'
  - uid: >-
      Promise<HttpOperationResponse<azure-maps-rest.atlas.atlas.Models.SearchAddressReverseCrossStreetResponse>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: SearchAddressReverseCrossStreetResponse
        fullName: SearchAddressReverseCrossStreetResponse
        uid: >-
          azure-maps-rest.atlas.atlas.Models.SearchAddressReverseCrossStreetResponse
      - name: '>>'
        fullName: '>>'
  - uid: >-
      Promise<HttpOperationResponse<azure-maps-rest.atlas.atlas.Models.SearchAddressReverseResponse>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: SearchAddressReverseResponse
        fullName: SearchAddressReverseResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchAddressReverseResponse
      - name: '>>'
        fullName: '>>'
  - uid: >-
      Promise<azure-maps-rest.atlas.atlas.Models.SearchAddressStructuredResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: SearchAddressStructuredResponse
        fullName: SearchAddressStructuredResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchAddressStructuredResponse
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-maps-rest.atlas.atlas.Models.SearchGetSearchAddressStructuredOptionalParams
    spec.typeScript:
      - name: SearchGetSearchAddressStructuredOptionalParams
        fullName: SearchGetSearchAddressStructuredOptionalParams
        uid: >-
          azure-maps-rest.atlas.atlas.Models.SearchGetSearchAddressStructuredOptionalParams
  - uid: >-
      ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchAddressStructuredResponse>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SearchAddressStructuredResponse
        fullName: SearchAddressStructuredResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchAddressStructuredResponse
      - name: '>'
        fullName: '>'
  - uid: >-
      Promise<HttpOperationResponse<azure-maps-rest.atlas.atlas.Models.SearchAddressStructuredResponse>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: SearchAddressStructuredResponse
        fullName: SearchAddressStructuredResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchAddressStructuredResponse
      - name: '>>'
        fullName: '>>'
  - uid: >-
      Promise<HttpOperationResponse<azure-maps-rest.atlas.atlas.Models.SearchAddressResponse>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: SearchAddressResponse
        fullName: SearchAddressResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchAddressResponse
      - name: '>>'
        fullName: '>>'
  - uid: azure-maps-rest.atlas.atlas.Models.SearchGetSearchAlongRouteOptionalParams
    spec.typeScript:
      - name: SearchGetSearchAlongRouteOptionalParams
        fullName: SearchGetSearchAlongRouteOptionalParams
        uid: >-
          azure-maps-rest.atlas.atlas.Models.SearchGetSearchAlongRouteOptionalParams
  - uid: >-
      Promise<HttpOperationResponse<azure-maps-rest.atlas.atlas.Models.SearchAlongRouteResponse>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: SearchAlongRouteResponse
        fullName: SearchAlongRouteResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchAlongRouteResponse
      - name: '>>'
        fullName: '>>'
  - uid: Promise<azure-maps-rest.atlas.atlas.Models.SearchFuzzyResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: SearchFuzzyResponse
        fullName: SearchFuzzyResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchFuzzyResponse
      - name: '>'
        fullName: '>'
  - uid: azure-maps-rest.atlas.atlas.Models.SearchGetSearchFuzzyOptionalParams
    spec.typeScript:
      - name: SearchGetSearchFuzzyOptionalParams
        fullName: SearchGetSearchFuzzyOptionalParams
        uid: azure-maps-rest.atlas.atlas.Models.SearchGetSearchFuzzyOptionalParams
  - uid: ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchFuzzyResponse>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SearchFuzzyResponse
        fullName: SearchFuzzyResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchFuzzyResponse
      - name: '>'
        fullName: '>'
  - uid: >-
      Promise<HttpOperationResponse<azure-maps-rest.atlas.atlas.Models.SearchFuzzyResponse>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: SearchFuzzyResponse
        fullName: SearchFuzzyResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchFuzzyResponse
      - name: '>>'
        fullName: '>>'
  - uid: >-
      azure-maps-rest.atlas.atlas.Models.SearchGetSearchInsideGeometryOptionalParams
    spec.typeScript:
      - name: SearchGetSearchInsideGeometryOptionalParams
        fullName: SearchGetSearchInsideGeometryOptionalParams
        uid: >-
          azure-maps-rest.atlas.atlas.Models.SearchGetSearchInsideGeometryOptionalParams
  - uid: >-
      Promise<HttpOperationResponse<azure-maps-rest.atlas.atlas.Models.SearchGeometryResponse>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: SearchGeometryResponse
        fullName: SearchGeometryResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchGeometryResponse
      - name: '>>'
        fullName: '>>'
  - uid: Promise<azure-maps-rest.atlas.atlas.Models.SearchNearbyResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: SearchNearbyResponse
        fullName: SearchNearbyResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchNearbyResponse
      - name: '>'
        fullName: '>'
  - uid: azure-maps-rest.atlas.atlas.Models.SearchGetSearchNearbyOptionalParams
    spec.typeScript:
      - name: SearchGetSearchNearbyOptionalParams
        fullName: SearchGetSearchNearbyOptionalParams
        uid: azure-maps-rest.atlas.atlas.Models.SearchGetSearchNearbyOptionalParams
  - uid: ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchNearbyResponse>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SearchNearbyResponse
        fullName: SearchNearbyResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchNearbyResponse
      - name: '>'
        fullName: '>'
  - uid: >-
      Promise<HttpOperationResponse<azure-maps-rest.atlas.atlas.Models.SearchNearbyResponse>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: SearchNearbyResponse
        fullName: SearchNearbyResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchNearbyResponse
      - name: '>>'
        fullName: '>>'
  - uid: Promise<azure-maps-rest.atlas.atlas.Models.SearchPoiResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: SearchPoiResponse
        fullName: SearchPoiResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchPoiResponse
      - name: '>'
        fullName: '>'
  - uid: azure-maps-rest.atlas.atlas.Models.SearchGetSearchPOIOptionalParams
    spec.typeScript:
      - name: SearchGetSearchPOIOptionalParams
        fullName: SearchGetSearchPOIOptionalParams
        uid: azure-maps-rest.atlas.atlas.Models.SearchGetSearchPOIOptionalParams
  - uid: ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchPoiResponse>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SearchPoiResponse
        fullName: SearchPoiResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchPoiResponse
      - name: '>'
        fullName: '>'
  - uid: Promise<azure-maps-rest.atlas.atlas.Models.SearchPoiCategoryResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: SearchPoiCategoryResponse
        fullName: SearchPoiCategoryResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchPoiCategoryResponse
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-maps-rest.atlas.atlas.Models.SearchGetSearchPOICategoryOptionalParams
    spec.typeScript:
      - name: SearchGetSearchPOICategoryOptionalParams
        fullName: SearchGetSearchPOICategoryOptionalParams
        uid: >-
          azure-maps-rest.atlas.atlas.Models.SearchGetSearchPOICategoryOptionalParams
  - uid: >-
      ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchPoiCategoryResponse>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SearchPoiCategoryResponse
        fullName: SearchPoiCategoryResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchPoiCategoryResponse
      - name: '>'
        fullName: '>'
  - uid: >-
      Promise<HttpOperationResponse<azure-maps-rest.atlas.atlas.Models.SearchPoiCategoryResponse>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: SearchPoiCategoryResponse
        fullName: SearchPoiCategoryResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchPoiCategoryResponse
      - name: '>>'
        fullName: '>>'
  - uid: >-
      Promise<HttpOperationResponse<azure-maps-rest.atlas.atlas.Models.SearchPoiResponse>>
    spec.typeScript:
      - name: Promise<HttpOperationResponse<
        fullName: Promise<HttpOperationResponse<
      - name: SearchPoiResponse
        fullName: SearchPoiResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchPoiResponse
      - name: '>>'
        fullName: '>>'
  - uid: azure-maps-rest.atlas.atlas.Models.SearchAlongRouteRequestBody
    spec.typeScript:
      - name: SearchAlongRouteRequestBody
        fullName: SearchAlongRouteRequestBody
        uid: azure-maps-rest.atlas.atlas.Models.SearchAlongRouteRequestBody
  - uid: Promise<azure-maps-rest.atlas.atlas.Models.SearchAlongRouteResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: SearchAlongRouteResponse
        fullName: SearchAlongRouteResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchAlongRouteResponse
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-maps-rest.atlas.atlas.Models.SearchPostSearchAlongRouteOptionalParams
    spec.typeScript:
      - name: SearchPostSearchAlongRouteOptionalParams
        fullName: SearchPostSearchAlongRouteOptionalParams
        uid: >-
          azure-maps-rest.atlas.atlas.Models.SearchPostSearchAlongRouteOptionalParams
  - uid: >-
      ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchAlongRouteResponse>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SearchAlongRouteResponse
        fullName: SearchAlongRouteResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchAlongRouteResponse
      - name: '>'
        fullName: '>'
  - uid: azure-maps-rest.atlas.atlas.Models.SearchInsideGeometryRequestBody
    spec.typeScript:
      - name: SearchInsideGeometryRequestBody
        fullName: SearchInsideGeometryRequestBody
        uid: azure-maps-rest.atlas.atlas.Models.SearchInsideGeometryRequestBody
  - uid: Promise<azure-maps-rest.atlas.atlas.Models.SearchGeometryResponse>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: SearchGeometryResponse
        fullName: SearchGeometryResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchGeometryResponse
      - name: '>'
        fullName: '>'
  - uid: >-
      azure-maps-rest.atlas.atlas.Models.SearchPostSearchInsideGeometryOptionalParams
    spec.typeScript:
      - name: SearchPostSearchInsideGeometryOptionalParams
        fullName: SearchPostSearchInsideGeometryOptionalParams
        uid: >-
          azure-maps-rest.atlas.atlas.Models.SearchPostSearchInsideGeometryOptionalParams
  - uid: ServiceCallback<azure-maps-rest.atlas.atlas.Models.SearchGeometryResponse>
    spec.typeScript:
      - name: ServiceCallback<
        fullName: ServiceCallback<
      - name: SearchGeometryResponse
        fullName: SearchGeometryResponse
        uid: azure-maps-rest.atlas.atlas.Models.SearchGeometryResponse
      - name: '>'
        fullName: '>'
  - uid: azure-maps-rest.atlas.atlas.Models.MapsClientOptions
    spec.typeScript:
      - name: MapsClientOptions
        fullName: MapsClientOptions
        uid: azure-maps-rest.atlas.atlas.Models.MapsClientOptions
  - uid: azure-maps-rest.atlas.atlas.service.atlas.service.operations.Route
    spec.typeScript:
      - name: Route
        fullName: Route
        uid: azure-maps-rest.atlas.atlas.service.atlas.service.operations.Route
  - uid: azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search
    spec.typeScript:
      - name: Search
        fullName: Search
        uid: azure-maps-rest.atlas.atlas.service.atlas.service.operations.Search

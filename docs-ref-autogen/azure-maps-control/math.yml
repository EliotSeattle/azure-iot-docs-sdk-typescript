### YamlMime:UniversalReference
items:
  - uid: azure-maps-control.math
    name: math
    fullName: math
    children:
      - azure-maps-control.math.boundingBoxToPolygon
      - azure-maps-control.math.convertDistance
      - azure-maps-control.math.getCardinalSpline
      - azure-maps-control.math.getDestination
      - azure-maps-control.math.getDistanceTo
      - azure-maps-control.math.getEarthRadius
      - azure-maps-control.math.getGeodesicPath
      - azure-maps-control.math.getHeading
      - azure-maps-control.math.getLengthOfPath
      - azure-maps-control.math.getPositionAlongPath
      - azure-maps-control.math.getRegularPolygonPath
      - azure-maps-control.math.interpolate
      - azure-maps-control.math.normalizeLatitude
      - azure-maps-control.math.normalizeLongitude
    langs:
      - typeScript
    type: module
    summary: ''
    package: azure-maps-control
  - uid: azure-maps-control.math.boundingBoxToPolygon
    name: boundingBoxToPolygon
    children: []
    type: function
    langs:
      - typeScript
    summary: Takes a BoundingBox and converts it to a polygon.
    syntax:
      content: 'function boundingBoxToPolygon(bounds: BoundingBox)'
      parameters:
        - id: bounds
          type:
            - azure-maps-control.atlas.data.BoundingBox
          description: The BoundingBox to convert to a Polygon.
      return:
        type:
          - azure-maps-control.atlas.data.Polygon
    package: azure-maps-control
  - uid: azure-maps-control.math.convertDistance
    name: convertDistance
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Converts a distance from one distance units to another. Supported units:
      miles, nauticalMiles, yards, meters, kilometers, feet
    syntax:
      content: >-
        function convertDistance(distance: number, fromUnits: string, toUnits:
        string, decimals?: number)
      parameters:
        - id: distance
          type:
            - number
          description: A number that represents a distance to convert.
        - id: fromUnits
          type:
            - string
          description: The distance units the original distance is in.
        - id: toUnits
          type:
            - string
          description: The desired distance units to convert to.
        - id: decimals
          type:
            - number
          description: >-
            Specifies the number of decimal places to round the result to. If
            undefined, no rounding will occur.
          optional: true
      return:
        type:
          - number
    package: azure-maps-control
  - uid: azure-maps-control.math.getCardinalSpline
    name: getCardinalSpline
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Calculates an array of positions that form a cardinal spline between the
      specified array of positions.
    syntax:
      content: >-
        function getCardinalSpline(positions: Position[], tension?: number,
        nodeSize?: number, close?: boolean)
      parameters:
        - id: positions
          type:
            - 'Position[]'
          description: The array of positions to calculate the spline through.
        - id: tension
          type:
            - number
          description: >-
            A number that indicates the tightness of the curve. Can be any
            number, although a value between 0 and 1 is usually used. Default:
            0.5
          optional: true
        - id: nodeSize
          type:
            - number
          description: 'Number of nodes to insert between each position. Default: 15'
          optional: true
        - id: close
          type:
            - boolean
          description: >-
            A boolean indicating if the spline should be a closed ring or not.
            Default: false
          optional: true
      return:
        type:
          - 'Position[]'
    package: azure-maps-control
  - uid: azure-maps-control.math.getDestination
    name: getDestination
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Calculates a destination position based on a starting position, a heading,
      a distance, and a distance unit type.
    syntax:
      content: >-
        function getDestination(origin: Position, heading: number, distance:
        number, units?: string)
      parameters:
        - id: origin
          type:
            - Position
          description: Position that the destination is relative to.
        - id: heading
          type:
            - number
          description: >-
            A heading angle between 0 - 360 degrees. 0 - North, 90 - East, 180 -
            South, 270 - West.
        - id: distance
          type:
            - number
          description: Distance that destination is away.
        - id: units
          type:
            - string
          description: Unit of distance measurement. Default is meters.
          optional: true
      return:
        type:
          - Position
    package: azure-maps-control
  - uid: azure-maps-control.math.getDistanceTo
    name: getDistanceTo
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Calculate the distance between two position objects on the surface of the
      earth using the Haversine formula.
    syntax:
      content: >-
        function getDistanceTo(origin: Position, destination: Position, units?:
        string)
      parameters:
        - id: origin
          type:
            - Position
          description: First position to calculate distance between.
        - id: destination
          type:
            - Position
          description: Second position to calculate distance between.
        - id: units
          type:
            - string
          description: Unit of distance measurement. Default is meters.
          optional: true
      return:
        type:
          - number
    package: azure-maps-control
  - uid: azure-maps-control.math.getEarthRadius
    name: getEarthRadius
    children: []
    type: function
    langs:
      - typeScript
    summary: Retrieves the radius of the earth in a specific distance unit for WGS84.
    syntax:
      content: 'function getEarthRadius(units?: string)'
      parameters:
        - id: units
          type:
            - string
          description: 'Unit of distance measurement. Default: meters'
          optional: true
      return:
        type:
          - number
    package: azure-maps-control
  - uid: azure-maps-control.math.getGeodesicPath
    name: getGeodesicPath
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Takes an array of positions objects and fills in the space between them
      with accurately positioned positions to form an approximated Geodesic
      path.
    syntax:
      content: >-
        function getGeodesicPath(path: LineString | Position[], nodeSize?:
        number)
      parameters:
        - id: path
          type:
            - 'azure-maps-control.atlas.data.LineString | Position[]'
          description: Array of position objects that form a path to fill in.
        - id: nodeSize
          type:
            - number
          description: 'Number of nodes to insert between each position. Default: 15'
          optional: true
      return:
        type:
          - 'Position[]'
    package: azure-maps-control
  - uid: azure-maps-control.math.getHeading
    name: getHeading
    children: []
    type: function
    langs:
      - typeScript
    summary: Calculates the heading from one position object to another.
    syntax:
      content: 'function getHeading(origin: Position, destination: Position)'
      parameters:
        - id: origin
          type:
            - Position
          description: Point of origin.
        - id: destination
          type:
            - Position
          description: Destination to calculate relative heading to.
      return:
        type:
          - number
    package: azure-maps-control
  - uid: azure-maps-control.math.getLengthOfPath
    name: getLengthOfPath
    children: []
    type: function
    langs:
      - typeScript
    summary: Calculates the distance between all position objects in an array.
    syntax:
      content: 'function getLengthOfPath(path: LineString | Position[], units?: string)'
      parameters:
        - id: path
          type:
            - 'azure-maps-control.atlas.data.LineString | Position[]'
          description: >-
            The array of position objects that make up the path to calculate the
            length of.
        - id: units
          type:
            - string
          description: 'Unit of distance measurement. Default: meters'
          optional: true
      return:
        type:
          - number
    package: azure-maps-control
  - uid: azure-maps-control.math.getPositionAlongPath
    name: getPositionAlongPath
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Calculates the position object on a path that is a specified distance away
      from the start of the path. If the specified distance is longer

      than the length of the path, the last position of the path will be
      returned.
    syntax:
      content: >-
        function getPositionAlongPath(path: LineString | Position[], distance:
        number, units?: string)
      parameters:
        - id: path
          type:
            - 'azure-maps-control.atlas.data.LineString | Position[]'
          description: A polyline or array of position coordinates that form a path.
        - id: distance
          type:
            - number
          description: >-
            The distance along the path (from the start) to calculate the
            position for.
        - id: units
          type:
            - string
          description: Unit of distance measurement. Default is meters.
          optional: true
      return:
        type:
          - Position
    package: azure-maps-control
  - uid: azure-maps-control.math.getRegularPolygonPath
    name: getRegularPolygonPath
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Calculates an array of position objects that are an equal distance away
      from a central point to create a regular polygon.
    syntax:
      content: >-
        function getRegularPolygonPath(origin: Position, radius: number,
        numberOfPositions: number, units?: string, offset?: number)
      parameters:
        - id: origin
          type:
            - Position
          description: Center of the regular polygon.
        - id: radius
          type:
            - number
          description: Radius of the regular polygon.
        - id: numberOfPositions
          type:
            - number
          description: Number of positions the polygon should have.
        - id: units
          type:
            - string
          description: Unit of distance measurement. Default is meters.
          optional: true
        - id: offset
          type:
            - number
          description: >-
            An offset to rotate the polygon. When 0 the first position will
            align with North.
          optional: true
      return:
        type:
          - 'Position[]'
    package: azure-maps-control
  - uid: azure-maps-control.math.interpolate
    name: interpolate
    children: []
    type: function
    langs:
      - typeScript
    summary: >-
      Calculates a position object that is a fractional distance between two
      position objects.
    syntax:
      content: >-
        function interpolate(origin: Position, destination: Position, fraction?:
        number)
      parameters:
        - id: origin
          type:
            - Position
          description: First position to calculate mid-point between.
        - id: destination
          type:
            - Position
          description: Second position to calculate mid-point between.
        - id: fraction
          type:
            - number
          description: The fractional parameter to calculate a mid-point for. Default 0.5.
          optional: true
      return:
        type:
          - Position
    package: azure-maps-control
  - uid: azure-maps-control.math.normalizeLatitude
    name: normalizeLatitude
    children: []
    type: function
    langs:
      - typeScript
    summary: Normalizes a latitude value between -90 and 90 degrees.
    syntax:
      content: 'function normalizeLatitude(lat: number)'
      parameters:
        - id: lat
          type:
            - number
          description: |
            The latitude value to normalize.
      return:
        type:
          - number
    package: azure-maps-control
  - uid: azure-maps-control.math.normalizeLongitude
    name: normalizeLongitude
    children: []
    type: function
    langs:
      - typeScript
    summary: Normalizes a longitude value between -180 and 180 degrees.
    syntax:
      content: 'function normalizeLongitude(lng: number)'
      parameters:
        - id: lng
          type:
            - number
          description: |
            The longitude value to normalize.
      return:
        type:
          - number
    package: azure-maps-control
references:
  - uid: azure-maps-control.atlas.data.BoundingBox
    name: BoundingBox
    spec.typeScript:
      - name: BoundingBox
        fullName: BoundingBox
        uid: azure-maps-control.atlas.data.BoundingBox
  - uid: azure-maps-control.atlas.data.Polygon
    name: Polygon
    spec.typeScript:
      - name: Polygon
        fullName: Polygon
        uid: azure-maps-control.atlas.data.Polygon
  - uid: 'azure-maps-control.atlas.data.LineString | Position[]'
    name: 'LineString | Position[]'
    spec.typeScript:
      - name: LineString
        fullName: LineString
        uid: azure-maps-control.atlas.data.LineString
      - name: ' | Position[]'
        fullName: ' | Position[]'
  - uid: azure-maps-control.math.boundingBoxToPolygon
    name: boundingBoxToPolygon
  - uid: azure-maps-control.math.convertDistance
    name: convertDistance
  - uid: azure-maps-control.math.getCardinalSpline
    name: getCardinalSpline
  - uid: azure-maps-control.math.getDestination
    name: getDestination
  - uid: azure-maps-control.math.getDistanceTo
    name: getDistanceTo
  - uid: azure-maps-control.math.getEarthRadius
    name: getEarthRadius
  - uid: azure-maps-control.math.getGeodesicPath
    name: getGeodesicPath
  - uid: azure-maps-control.math.getHeading
    name: getHeading
  - uid: azure-maps-control.math.getLengthOfPath
    name: getLengthOfPath
  - uid: azure-maps-control.math.getPositionAlongPath
    name: getPositionAlongPath
  - uid: azure-maps-control.math.getRegularPolygonPath
    name: getRegularPolygonPath
  - uid: azure-maps-control.math.interpolate
    name: interpolate
  - uid: azure-maps-control.math.normalizeLatitude
    name: normalizeLatitude
  - uid: azure-maps-control.math.normalizeLongitude
    name: normalizeLongitude
